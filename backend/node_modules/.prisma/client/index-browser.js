
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  location: 'location',
  timezone: 'timezone',
  dinnerTimePreference: 'dinnerTimePreference',
  spiceTolerance: 'spiceTolerance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dietaryRestrictions: 'dietaryRestrictions',
  allergies: 'allergies',
  favoriteIngredients: 'favoriteIngredients',
  dislikedFoods: 'dislikedFoods',
  favoriteCuisines: 'favoriteCuisines',
  favoriteDishes: 'favoriteDishes',
  favoriteChefs: 'favoriteChefs',
  favoriteRestaurants: 'favoriteRestaurants',
  cookingSkillLevel: 'cookingSkillLevel',
  preferredCookingTime: 'preferredCookingTime',
  servingSize: 'servingSize',
  nutritionalGoals: 'nutritionalGoals',
  budgetPreference: 'budgetPreference',
  preferredMealTypes: 'preferredMealTypes',
  availableEquipment: 'availableEquipment',
  mealComplexity: 'mealComplexity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  ingredients: 'ingredients',
  instructions: 'instructions',
  cookingTime: 'cookingTime',
  difficulty: 'difficulty',
  cuisineType: 'cuisineType',
  inspirationSource: 'inspirationSource',
  servings: 'servings',
  nutritionInfo: 'nutritionInfo',
  tags: 'tags',
  isPublic: 'isPublic',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRecipeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recipeId: 'recipeId',
  rating: 'rating',
  notes: 'notes',
  cookedDate: 'cookedDate',
  isFavorite: 'isFavorite',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FavoriteRecipeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recipeId: 'recipeId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SpiceTolerance = exports.$Enums.SpiceTolerance = {
  MILD: 'MILD',
  MEDIUM: 'MEDIUM',
  HOT: 'HOT',
  EXTREME: 'EXTREME'
};

exports.SkillLevel = exports.$Enums.SkillLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.BudgetPreference = exports.$Enums.BudgetPreference = {
  BUDGET: 'BUDGET',
  MODERATE: 'MODERATE',
  PREMIUM: 'PREMIUM',
  LUXURY: 'LUXURY'
};

exports.MealComplexity = exports.$Enums.MealComplexity = {
  ONE_POT: 'ONE_POT',
  SIMPLE: 'SIMPLE',
  MODERATE: 'MODERATE',
  COMPLEX: 'COMPLEX',
  GOURMET: 'GOURMET'
};

exports.NutritionalGoal = exports.$Enums.NutritionalGoal = {
  WEIGHT_LOSS: 'WEIGHT_LOSS',
  MUSCLE_GAIN: 'MUSCLE_GAIN',
  MAINTENANCE: 'MAINTENANCE',
  HEART_HEALTHY: 'HEART_HEALTHY',
  DIABETIC_FRIENDLY: 'DIABETIC_FRIENDLY',
  LOW_SODIUM: 'LOW_SODIUM',
  HIGH_PROTEIN: 'HIGH_PROTEIN',
  LOW_CARB: 'LOW_CARB',
  HIGH_FIBER: 'HIGH_FIBER',
  ANTI_INFLAMMATORY: 'ANTI_INFLAMMATORY',
  GUT_HEALTH: 'GUT_HEALTH',
  HORMONE_BALANCE: 'HORMONE_BALANCE',
  ENERGY_BOOST: 'ENERGY_BOOST',
  IMMUNE_SUPPORT: 'IMMUNE_SUPPORT',
  BRAIN_HEALTH: 'BRAIN_HEALTH',
  LONGEVITY: 'LONGEVITY',
  METABOLISM_BOOST: 'METABOLISM_BOOST',
  STRESS_REDUCTION: 'STRESS_REDUCTION',
  SLEEP_IMPROVEMENT: 'SLEEP_IMPROVEMENT',
  INTERMITTENT_FASTING: 'INTERMITTENT_FASTING',
  PLANT_BASED: 'PLANT_BASED',
  MEDITERRANEAN: 'MEDITERRANEAN',
  KETO_FRIENDLY: 'KETO_FRIENDLY',
  PALEO_FRIENDLY: 'PALEO_FRIENDLY',
  WHOLE30_COMPATIBLE: 'WHOLE30_COMPATIBLE',
  ATHLETIC_PERFORMANCE: 'ATHLETIC_PERFORMANCE',
  POST_WORKOUT_RECOVERY: 'POST_WORKOUT_RECOVERY',
  PRENATAL_NUTRITION: 'PRENATAL_NUTRITION',
  HEALTHY_AGING: 'HEALTHY_AGING',
  DETOX_SUPPORT: 'DETOX_SUPPORT',
  BONE_HEALTH: 'BONE_HEALTH',
  SKIN_HEALTH: 'SKIN_HEALTH',
  DIGESTIVE_HEALTH: 'DIGESTIVE_HEALTH'
};

exports.MealType = exports.$Enums.MealType = {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER',
  BRUNCH: 'BRUNCH',
  SNACKS: 'SNACKS',
  APPETIZERS: 'APPETIZERS',
  LATE_NIGHT: 'LATE_NIGHT',
  QUICK_BITES: 'QUICK_BITES',
  FINGER_FOODS: 'FINGER_FOODS',
  DESSERTS: 'DESSERTS',
  BAKED_GOODS: 'BAKED_GOODS',
  FROZEN_TREATS: 'FROZEN_TREATS',
  HOLIDAY_SWEETS: 'HOLIDAY_SWEETS',
  SMOOTHIES: 'SMOOTHIES',
  COCKTAILS: 'COCKTAILS',
  HOT_BEVERAGES: 'HOT_BEVERAGES',
  FRESH_JUICES: 'FRESH_JUICES',
  MEAL_PREP: 'MEAL_PREP',
  BATCH_COOKING: 'BATCH_COOKING',
  FREEZER_MEALS: 'FREEZER_MEALS',
  LUNCHBOX_MEALS: 'LUNCHBOX_MEALS',
  PARTY_FOOD: 'PARTY_FOOD',
  HOLIDAY_MEALS: 'HOLIDAY_MEALS',
  CELEBRATION_CAKES: 'CELEBRATION_CAKES',
  PICNIC_FOOD: 'PICNIC_FOOD',
  BBQ_GRILLING: 'BBQ_GRILLING',
  POST_WORKOUT: 'POST_WORKOUT',
  DETOX_MEALS: 'DETOX_MEALS',
  COMFORT_FOOD: 'COMFORT_FOOD',
  ENERGY_BOOSTERS: 'ENERGY_BOOSTERS',
  STREET_FOOD: 'STREET_FOOD',
  TAPAS_SMALL_PLATES: 'TAPAS_SMALL_PLATES',
  FAMILY_STYLE: 'FAMILY_STYLE',
  BUFFET_STYLE: 'BUFFET_STYLE',
  KETO_MEALS: 'KETO_MEALS',
  VEGAN_MEALS: 'VEGAN_MEALS',
  GLUTEN_FREE: 'GLUTEN_FREE',
  LOW_CARB: 'LOW_CARB',
  HIGH_PROTEIN: 'HIGH_PROTEIN',
  ONE_POT_MEALS: 'ONE_POT_MEALS',
  NO_COOK_MEALS: 'NO_COOK_MEALS',
  SLOW_COOKER: 'SLOW_COOKER',
  AIR_FRYER: 'AIR_FRYER',
  GRILLED_MEALS: 'GRILLED_MEALS'
};

exports.CookingEquipment = exports.$Enums.CookingEquipment = {
  OVEN: 'OVEN',
  STOVETOP: 'STOVETOP',
  MICROWAVE: 'MICROWAVE',
  GRILL: 'GRILL',
  OUTDOOR_SMOKER: 'OUTDOOR_SMOKER',
  PIZZA_OVEN: 'PIZZA_OVEN',
  FIRE_PIT: 'FIRE_PIT',
  AIR_FRYER: 'AIR_FRYER',
  CONVECTION_OVEN: 'CONVECTION_OVEN',
  TOASTER_OVEN: 'TOASTER_OVEN',
  COUNTERTOP_CONVECTION: 'COUNTERTOP_CONVECTION',
  SLOW_COOKER: 'SLOW_COOKER',
  PRESSURE_COOKER: 'PRESSURE_COOKER',
  INSTANT_POT: 'INSTANT_POT',
  DUTCH_OVEN: 'DUTCH_OVEN',
  TAGINE: 'TAGINE',
  BLENDER: 'BLENDER',
  HIGH_SPEED_BLENDER: 'HIGH_SPEED_BLENDER',
  IMMERSION_BLENDER: 'IMMERSION_BLENDER',
  FOOD_PROCESSOR: 'FOOD_PROCESSOR',
  STAND_MIXER: 'STAND_MIXER',
  HAND_MIXER: 'HAND_MIXER',
  MORTAR_PESTLE: 'MORTAR_PESTLE',
  RICE_COOKER: 'RICE_COOKER',
  STEAMER: 'STEAMER',
  BAMBOO_STEAMER: 'BAMBOO_STEAMER',
  ELECTRIC_STEAMER: 'ELECTRIC_STEAMER',
  DEEP_FRYER: 'DEEP_FRYER',
  SOUS_VIDE: 'SOUS_VIDE',
  DEHYDRATOR: 'DEHYDRATOR',
  FERMENTATION_CROCK: 'FERMENTATION_CROCK',
  MANDOLINE_SLICER: 'MANDOLINE_SLICER',
  SPIRALIZER: 'SPIRALIZER',
  JUICER: 'JUICER',
  ESPRESSO_MACHINE: 'ESPRESSO_MACHINE',
  BREAD_MAKER: 'BREAD_MAKER',
  PASTA_MACHINE: 'PASTA_MACHINE',
  ICE_CREAM_MAKER: 'ICE_CREAM_MAKER',
  YOGURT_MAKER: 'YOGURT_MAKER',
  WAFFLE_MAKER: 'WAFFLE_MAKER',
  PANCAKE_GRIDDLE: 'PANCAKE_GRIDDLE',
  CREPE_MAKER: 'CREPE_MAKER',
  FONDUE_POT: 'FONDUE_POT',
  INDOOR_GRILL: 'INDOOR_GRILL',
  PANINI_PRESS: 'PANINI_PRESS',
  SANDWICH_MAKER: 'SANDWICH_MAKER',
  ELECTRIC_WOK: 'ELECTRIC_WOK',
  INDUCTION_COOKTOP: 'INDUCTION_COOKTOP',
  PORTABLE_BURNER: 'PORTABLE_BURNER',
  KITCHEN_SCALE: 'KITCHEN_SCALE',
  DOUGH_MIXER: 'DOUGH_MIXER',
  PROOFING_BASKET: 'PROOFING_BASKET',
  BAKING_STONE: 'BAKING_STONE',
  SHEET_PAN: 'SHEET_PAN',
  CAST_IRON_SKILLET: 'CAST_IRON_SKILLET',
  CARBON_STEEL_PAN: 'CARBON_STEEL_PAN',
  COPPER_COOKWARE: 'COPPER_COOKWARE',
  SMART_THERMOMETER: 'SMART_THERMOMETER',
  VACUUM_SEALER: 'VACUUM_SEALER',
  SMOKING_GUN: 'SMOKING_GUN',
  CULINARY_TORCH: 'CULINARY_TORCH',
  NITROUS_OXIDE_WHIPPER: 'NITROUS_OXIDE_WHIPPER',
  CHEF_KNIFE: 'CHEF_KNIFE',
  CUTTING_BOARD: 'CUTTING_BOARD',
  MIXING_BOWLS: 'MIXING_BOWLS',
  MEASURING_CUPS: 'MEASURING_CUPS',
  KITCHEN_THERMOMETER: 'KITCHEN_THERMOMETER'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD',
  EXPERT: 'EXPERT'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserPreferences: 'UserPreferences',
  Recipe: 'Recipe',
  UserRecipe: 'UserRecipe',
  FavoriteRecipe: 'FavoriteRecipe'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
