
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserPreferences
 * 
 */
export type UserPreferences = $Result.DefaultSelection<Prisma.$UserPreferencesPayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>
/**
 * Model UserRecipe
 * 
 */
export type UserRecipe = $Result.DefaultSelection<Prisma.$UserRecipePayload>
/**
 * Model FavoriteRecipe
 * 
 */
export type FavoriteRecipe = $Result.DefaultSelection<Prisma.$FavoriteRecipePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SpiceTolerance: {
  MILD: 'MILD',
  MEDIUM: 'MEDIUM',
  HOT: 'HOT',
  EXTREME: 'EXTREME'
};

export type SpiceTolerance = (typeof SpiceTolerance)[keyof typeof SpiceTolerance]


export const SkillLevel: {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

export type SkillLevel = (typeof SkillLevel)[keyof typeof SkillLevel]


export const BudgetPreference: {
  BUDGET: 'BUDGET',
  MODERATE: 'MODERATE',
  PREMIUM: 'PREMIUM',
  LUXURY: 'LUXURY'
};

export type BudgetPreference = (typeof BudgetPreference)[keyof typeof BudgetPreference]


export const MealComplexity: {
  ONE_POT: 'ONE_POT',
  SIMPLE: 'SIMPLE',
  MODERATE: 'MODERATE',
  COMPLEX: 'COMPLEX',
  GOURMET: 'GOURMET'
};

export type MealComplexity = (typeof MealComplexity)[keyof typeof MealComplexity]


export const NutritionalGoal: {
  WEIGHT_LOSS: 'WEIGHT_LOSS',
  MUSCLE_GAIN: 'MUSCLE_GAIN',
  MAINTENANCE: 'MAINTENANCE',
  HEART_HEALTHY: 'HEART_HEALTHY',
  DIABETIC_FRIENDLY: 'DIABETIC_FRIENDLY',
  LOW_SODIUM: 'LOW_SODIUM',
  HIGH_PROTEIN: 'HIGH_PROTEIN',
  LOW_CARB: 'LOW_CARB',
  HIGH_FIBER: 'HIGH_FIBER'
};

export type NutritionalGoal = (typeof NutritionalGoal)[keyof typeof NutritionalGoal]


export const MealType: {
  BREAKFAST: 'BREAKFAST',
  LUNCH: 'LUNCH',
  DINNER: 'DINNER',
  SNACKS: 'SNACKS',
  DESSERTS: 'DESSERTS',
  APPETIZERS: 'APPETIZERS',
  BRUNCH: 'BRUNCH',
  LATE_NIGHT: 'LATE_NIGHT'
};

export type MealType = (typeof MealType)[keyof typeof MealType]


export const CookingEquipment: {
  OVEN: 'OVEN',
  STOVETOP: 'STOVETOP',
  MICROWAVE: 'MICROWAVE',
  GRILL: 'GRILL',
  AIR_FRYER: 'AIR_FRYER',
  SLOW_COOKER: 'SLOW_COOKER',
  PRESSURE_COOKER: 'PRESSURE_COOKER',
  BLENDER: 'BLENDER',
  FOOD_PROCESSOR: 'FOOD_PROCESSOR',
  STAND_MIXER: 'STAND_MIXER',
  TOASTER_OVEN: 'TOASTER_OVEN',
  RICE_COOKER: 'RICE_COOKER',
  STEAMER: 'STEAMER',
  DEEP_FRYER: 'DEEP_FRYER',
  SOUS_VIDE: 'SOUS_VIDE'
};

export type CookingEquipment = (typeof CookingEquipment)[keyof typeof CookingEquipment]


export const Difficulty: {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD',
  EXPERT: 'EXPERT'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]

}

export type SpiceTolerance = $Enums.SpiceTolerance

export const SpiceTolerance: typeof $Enums.SpiceTolerance

export type SkillLevel = $Enums.SkillLevel

export const SkillLevel: typeof $Enums.SkillLevel

export type BudgetPreference = $Enums.BudgetPreference

export const BudgetPreference: typeof $Enums.BudgetPreference

export type MealComplexity = $Enums.MealComplexity

export const MealComplexity: typeof $Enums.MealComplexity

export type NutritionalGoal = $Enums.NutritionalGoal

export const NutritionalGoal: typeof $Enums.NutritionalGoal

export type MealType = $Enums.MealType

export const MealType: typeof $Enums.MealType

export type CookingEquipment = $Enums.CookingEquipment

export const CookingEquipment: typeof $Enums.CookingEquipment

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userPreferences`: Exposes CRUD operations for the **UserPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreferences.findMany()
    * ```
    */
  get userPreferences(): Prisma.UserPreferencesDelegate<ExtArgs>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs>;

  /**
   * `prisma.userRecipe`: Exposes CRUD operations for the **UserRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRecipes
    * const userRecipes = await prisma.userRecipe.findMany()
    * ```
    */
  get userRecipe(): Prisma.UserRecipeDelegate<ExtArgs>;

  /**
   * `prisma.favoriteRecipe`: Exposes CRUD operations for the **FavoriteRecipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteRecipes
    * const favoriteRecipes = await prisma.favoriteRecipe.findMany()
    * ```
    */
  get favoriteRecipe(): Prisma.FavoriteRecipeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserPreferences: 'UserPreferences',
    Recipe: 'Recipe',
    UserRecipe: 'UserRecipe',
    FavoriteRecipe: 'FavoriteRecipe'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userPreferences" | "recipe" | "userRecipe" | "favoriteRecipe"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserPreferences: {
        payload: Prisma.$UserPreferencesPayload<ExtArgs>
        fields: Prisma.UserPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findFirst: {
            args: Prisma.UserPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findMany: {
            args: Prisma.UserPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          create: {
            args: Prisma.UserPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          createMany: {
            args: Prisma.UserPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          delete: {
            args: Prisma.UserPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          update: {
            args: Prisma.UserPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.UserPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          aggregate: {
            args: Prisma.UserPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreferences>
          }
          groupBy: {
            args: Prisma.UserPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      UserRecipe: {
        payload: Prisma.$UserRecipePayload<ExtArgs>
        fields: Prisma.UserRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>
          }
          findFirst: {
            args: Prisma.UserRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>
          }
          findMany: {
            args: Prisma.UserRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>[]
          }
          create: {
            args: Prisma.UserRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>
          }
          createMany: {
            args: Prisma.UserRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>[]
          }
          delete: {
            args: Prisma.UserRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>
          }
          update: {
            args: Prisma.UserRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>
          }
          deleteMany: {
            args: Prisma.UserRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRecipePayload>
          }
          aggregate: {
            args: Prisma.UserRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRecipe>
          }
          groupBy: {
            args: Prisma.UserRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<UserRecipeCountAggregateOutputType> | number
          }
        }
      }
      FavoriteRecipe: {
        payload: Prisma.$FavoriteRecipePayload<ExtArgs>
        fields: Prisma.FavoriteRecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteRecipeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          findFirst: {
            args: Prisma.FavoriteRecipeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteRecipeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          findMany: {
            args: Prisma.FavoriteRecipeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          create: {
            args: Prisma.FavoriteRecipeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          createMany: {
            args: Prisma.FavoriteRecipeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteRecipeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>[]
          }
          delete: {
            args: Prisma.FavoriteRecipeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          update: {
            args: Prisma.FavoriteRecipeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteRecipeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteRecipeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FavoriteRecipeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteRecipePayload>
          }
          aggregate: {
            args: Prisma.FavoriteRecipeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteRecipe>
          }
          groupBy: {
            args: Prisma.FavoriteRecipeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteRecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteRecipeCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteRecipeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userRecipes: number
    favoriteRecipes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRecipes?: boolean | UserCountOutputTypeCountUserRecipesArgs
    favoriteRecipes?: boolean | UserCountOutputTypeCountFavoriteRecipesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRecipeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
  }


  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    userRecipes: number
    favoriteRecipes: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRecipes?: boolean | RecipeCountOutputTypeCountUserRecipesArgs
    favoriteRecipes?: boolean | RecipeCountOutputTypeCountFavoriteRecipesArgs
  }

  // Custom InputTypes
  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountUserRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRecipeWhereInput
  }

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountFavoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    location: string | null
    timezone: string | null
    dinnerTimePreference: string | null
    spiceTolerance: $Enums.SpiceTolerance | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    name: string | null
    location: string | null
    timezone: string | null
    dinnerTimePreference: string | null
    spiceTolerance: $Enums.SpiceTolerance | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    name: number
    location: number
    timezone: number
    dinnerTimePreference: number
    spiceTolerance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    location?: true
    timezone?: true
    dinnerTimePreference?: true
    spiceTolerance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    location?: true
    timezone?: true
    dinnerTimePreference?: true
    spiceTolerance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    name?: true
    location?: true
    timezone?: true
    dinnerTimePreference?: true
    spiceTolerance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    name: string
    location: string | null
    timezone: string | null
    dinnerTimePreference: string | null
    spiceTolerance: $Enums.SpiceTolerance
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    location?: boolean
    timezone?: boolean
    dinnerTimePreference?: boolean
    spiceTolerance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    userRecipes?: boolean | User$userRecipesArgs<ExtArgs>
    favoriteRecipes?: boolean | User$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    location?: boolean
    timezone?: boolean
    dinnerTimePreference?: boolean
    spiceTolerance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    location?: boolean
    timezone?: boolean
    dinnerTimePreference?: boolean
    spiceTolerance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preferences?: boolean | User$preferencesArgs<ExtArgs>
    userRecipes?: boolean | User$userRecipesArgs<ExtArgs>
    favoriteRecipes?: boolean | User$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      preferences: Prisma.$UserPreferencesPayload<ExtArgs> | null
      userRecipes: Prisma.$UserRecipePayload<ExtArgs>[]
      favoriteRecipes: Prisma.$FavoriteRecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      name: string
      location: string | null
      timezone: string | null
      dinnerTimePreference: string | null
      spiceTolerance: $Enums.SpiceTolerance
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    preferences<T extends User$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$preferencesArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    userRecipes<T extends User$userRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$userRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findMany"> | Null>
    favoriteRecipes<T extends User$favoriteRecipesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly location: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly dinnerTimePreference: FieldRef<"User", 'String'>
    readonly spiceTolerance: FieldRef<"User", 'SpiceTolerance'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.preferences
   */
  export type User$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    where?: UserPreferencesWhereInput
  }

  /**
   * User.userRecipes
   */
  export type User$userRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    where?: UserRecipeWhereInput
    orderBy?: UserRecipeOrderByWithRelationInput | UserRecipeOrderByWithRelationInput[]
    cursor?: UserRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRecipeScalarFieldEnum | UserRecipeScalarFieldEnum[]
  }

  /**
   * User.favoriteRecipes
   */
  export type User$favoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    cursor?: FavoriteRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserPreferences
   */

  export type AggregateUserPreferences = {
    _count: UserPreferencesCountAggregateOutputType | null
    _avg: UserPreferencesAvgAggregateOutputType | null
    _sum: UserPreferencesSumAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  export type UserPreferencesAvgAggregateOutputType = {
    preferredCookingTime: number | null
    servingSize: number | null
  }

  export type UserPreferencesSumAggregateOutputType = {
    preferredCookingTime: number | null
    servingSize: number | null
  }

  export type UserPreferencesMinAggregateOutputType = {
    id: string | null
    userId: string | null
    cookingSkillLevel: $Enums.SkillLevel | null
    preferredCookingTime: number | null
    servingSize: number | null
    budgetPreference: $Enums.BudgetPreference | null
    mealComplexity: $Enums.MealComplexity | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferencesMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    cookingSkillLevel: $Enums.SkillLevel | null
    preferredCookingTime: number | null
    servingSize: number | null
    budgetPreference: $Enums.BudgetPreference | null
    mealComplexity: $Enums.MealComplexity | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPreferencesCountAggregateOutputType = {
    id: number
    userId: number
    dietaryRestrictions: number
    allergies: number
    favoriteIngredients: number
    dislikedFoods: number
    favoriteCuisines: number
    favoriteDishes: number
    favoriteChefs: number
    favoriteRestaurants: number
    cookingSkillLevel: number
    preferredCookingTime: number
    servingSize: number
    nutritionalGoals: number
    budgetPreference: number
    preferredMealTypes: number
    availableEquipment: number
    mealComplexity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPreferencesAvgAggregateInputType = {
    preferredCookingTime?: true
    servingSize?: true
  }

  export type UserPreferencesSumAggregateInputType = {
    preferredCookingTime?: true
    servingSize?: true
  }

  export type UserPreferencesMinAggregateInputType = {
    id?: true
    userId?: true
    cookingSkillLevel?: true
    preferredCookingTime?: true
    servingSize?: true
    budgetPreference?: true
    mealComplexity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferencesMaxAggregateInputType = {
    id?: true
    userId?: true
    cookingSkillLevel?: true
    preferredCookingTime?: true
    servingSize?: true
    budgetPreference?: true
    mealComplexity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPreferencesCountAggregateInputType = {
    id?: true
    userId?: true
    dietaryRestrictions?: true
    allergies?: true
    favoriteIngredients?: true
    dislikedFoods?: true
    favoriteCuisines?: true
    favoriteDishes?: true
    favoriteChefs?: true
    favoriteRestaurants?: true
    cookingSkillLevel?: true
    preferredCookingTime?: true
    servingSize?: true
    nutritionalGoals?: true
    budgetPreference?: true
    preferredMealTypes?: true
    availableEquipment?: true
    mealComplexity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to aggregate.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPreferencesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPreferencesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type GetUserPreferencesAggregateType<T extends UserPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreferences[P]>
      : GetScalarType<T[P], AggregateUserPreferences[P]>
  }




  export type UserPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
    orderBy?: UserPreferencesOrderByWithAggregationInput | UserPreferencesOrderByWithAggregationInput[]
    by: UserPreferencesScalarFieldEnum[] | UserPreferencesScalarFieldEnum
    having?: UserPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferencesCountAggregateInputType | true
    _avg?: UserPreferencesAvgAggregateInputType
    _sum?: UserPreferencesSumAggregateInputType
    _min?: UserPreferencesMinAggregateInputType
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type UserPreferencesGroupByOutputType = {
    id: string
    userId: string
    dietaryRestrictions: string[]
    allergies: string[]
    favoriteIngredients: string[]
    dislikedFoods: string[]
    favoriteCuisines: string[]
    favoriteDishes: string[]
    favoriteChefs: string[]
    favoriteRestaurants: string[]
    cookingSkillLevel: $Enums.SkillLevel
    preferredCookingTime: number | null
    servingSize: number | null
    nutritionalGoals: $Enums.NutritionalGoal[]
    budgetPreference: $Enums.BudgetPreference
    preferredMealTypes: $Enums.MealType[]
    availableEquipment: $Enums.CookingEquipment[]
    mealComplexity: $Enums.MealComplexity
    createdAt: Date
    updatedAt: Date
    _count: UserPreferencesCountAggregateOutputType | null
    _avg: UserPreferencesAvgAggregateOutputType | null
    _sum: UserPreferencesSumAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  type GetUserPreferencesGroupByPayload<T extends UserPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    dietaryRestrictions?: boolean
    allergies?: boolean
    favoriteIngredients?: boolean
    dislikedFoods?: boolean
    favoriteCuisines?: boolean
    favoriteDishes?: boolean
    favoriteChefs?: boolean
    favoriteRestaurants?: boolean
    cookingSkillLevel?: boolean
    preferredCookingTime?: boolean
    servingSize?: boolean
    nutritionalGoals?: boolean
    budgetPreference?: boolean
    preferredMealTypes?: boolean
    availableEquipment?: boolean
    mealComplexity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    dietaryRestrictions?: boolean
    allergies?: boolean
    favoriteIngredients?: boolean
    dislikedFoods?: boolean
    favoriteCuisines?: boolean
    favoriteDishes?: boolean
    favoriteChefs?: boolean
    favoriteRestaurants?: boolean
    cookingSkillLevel?: boolean
    preferredCookingTime?: boolean
    servingSize?: boolean
    nutritionalGoals?: boolean
    budgetPreference?: boolean
    preferredMealTypes?: boolean
    availableEquipment?: boolean
    mealComplexity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectScalar = {
    id?: boolean
    userId?: boolean
    dietaryRestrictions?: boolean
    allergies?: boolean
    favoriteIngredients?: boolean
    dislikedFoods?: boolean
    favoriteCuisines?: boolean
    favoriteDishes?: boolean
    favoriteChefs?: boolean
    favoriteRestaurants?: boolean
    cookingSkillLevel?: boolean
    preferredCookingTime?: boolean
    servingSize?: boolean
    nutritionalGoals?: boolean
    budgetPreference?: boolean
    preferredMealTypes?: boolean
    availableEquipment?: boolean
    mealComplexity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreferences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      dietaryRestrictions: string[]
      allergies: string[]
      favoriteIngredients: string[]
      dislikedFoods: string[]
      favoriteCuisines: string[]
      favoriteDishes: string[]
      favoriteChefs: string[]
      favoriteRestaurants: string[]
      cookingSkillLevel: $Enums.SkillLevel
      preferredCookingTime: number | null
      servingSize: number | null
      nutritionalGoals: $Enums.NutritionalGoal[]
      budgetPreference: $Enums.BudgetPreference
      preferredMealTypes: $Enums.MealType[]
      availableEquipment: $Enums.CookingEquipment[]
      mealComplexity: $Enums.MealComplexity
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPreferences"]>
    composites: {}
  }

  type UserPreferencesGetPayload<S extends boolean | null | undefined | UserPreferencesDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencesPayload, S>

  type UserPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPreferencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPreferencesCountAggregateInputType | true
    }

  export interface UserPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreferences'], meta: { name: 'UserPreferences' } }
    /**
     * Find zero or one UserPreferences that matches the filter.
     * @param {UserPreferencesFindUniqueArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferencesFindUniqueArgs>(args: SelectSubset<T, UserPreferencesFindUniqueArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPreferences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPreferencesFindUniqueOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferencesFindFirstArgs>(args?: SelectSubset<T, UserPreferencesFindFirstArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferencesWithIdOnly = await prisma.userPreferences.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPreferencesFindManyArgs>(args?: SelectSubset<T, UserPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPreferences.
     * @param {UserPreferencesCreateArgs} args - Arguments to create a UserPreferences.
     * @example
     * // Create one UserPreferences
     * const UserPreferences = await prisma.userPreferences.create({
     *   data: {
     *     // ... data to create a UserPreferences
     *   }
     * })
     * 
     */
    create<T extends UserPreferencesCreateArgs>(args: SelectSubset<T, UserPreferencesCreateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPreferences.
     * @param {UserPreferencesCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferencesCreateManyArgs>(args?: SelectSubset<T, UserPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferencesCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `id`
     * const userPreferencesWithIdOnly = await prisma.userPreferences.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPreferences.
     * @param {UserPreferencesDeleteArgs} args - Arguments to delete one UserPreferences.
     * @example
     * // Delete one UserPreferences
     * const UserPreferences = await prisma.userPreferences.delete({
     *   where: {
     *     // ... filter to delete one UserPreferences
     *   }
     * })
     * 
     */
    delete<T extends UserPreferencesDeleteArgs>(args: SelectSubset<T, UserPreferencesDeleteArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPreferences.
     * @param {UserPreferencesUpdateArgs} args - Arguments to update one UserPreferences.
     * @example
     * // Update one UserPreferences
     * const userPreferences = await prisma.userPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferencesUpdateArgs>(args: SelectSubset<T, UserPreferencesUpdateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferencesDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferencesDeleteManyArgs>(args?: SelectSubset<T, UserPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreferences = await prisma.userPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferencesUpdateManyArgs>(args: SelectSubset<T, UserPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreferences.
     * @param {UserPreferencesUpsertArgs} args - Arguments to update or create a UserPreferences.
     * @example
     * // Update or create a UserPreferences
     * const userPreferences = await prisma.userPreferences.upsert({
     *   create: {
     *     // ... data to create a UserPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreferences we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferencesUpsertArgs>(args: SelectSubset<T, UserPreferencesUpsertArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreferences.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferencesCountArgs>(
      args?: Subset<T, UserPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferencesAggregateArgs>(args: Subset<T, UserPreferencesAggregateArgs>): Prisma.PrismaPromise<GetUserPreferencesAggregateType<T>>

    /**
     * Group by UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreferences model
   */
  readonly fields: UserPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreferences model
   */ 
  interface UserPreferencesFieldRefs {
    readonly id: FieldRef<"UserPreferences", 'String'>
    readonly userId: FieldRef<"UserPreferences", 'String'>
    readonly dietaryRestrictions: FieldRef<"UserPreferences", 'String[]'>
    readonly allergies: FieldRef<"UserPreferences", 'String[]'>
    readonly favoriteIngredients: FieldRef<"UserPreferences", 'String[]'>
    readonly dislikedFoods: FieldRef<"UserPreferences", 'String[]'>
    readonly favoriteCuisines: FieldRef<"UserPreferences", 'String[]'>
    readonly favoriteDishes: FieldRef<"UserPreferences", 'String[]'>
    readonly favoriteChefs: FieldRef<"UserPreferences", 'String[]'>
    readonly favoriteRestaurants: FieldRef<"UserPreferences", 'String[]'>
    readonly cookingSkillLevel: FieldRef<"UserPreferences", 'SkillLevel'>
    readonly preferredCookingTime: FieldRef<"UserPreferences", 'Int'>
    readonly servingSize: FieldRef<"UserPreferences", 'Int'>
    readonly nutritionalGoals: FieldRef<"UserPreferences", 'NutritionalGoal[]'>
    readonly budgetPreference: FieldRef<"UserPreferences", 'BudgetPreference'>
    readonly preferredMealTypes: FieldRef<"UserPreferences", 'MealType[]'>
    readonly availableEquipment: FieldRef<"UserPreferences", 'CookingEquipment[]'>
    readonly mealComplexity: FieldRef<"UserPreferences", 'MealComplexity'>
    readonly createdAt: FieldRef<"UserPreferences", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPreferences", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserPreferences findUnique
   */
  export type UserPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findUniqueOrThrow
   */
  export type UserPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findFirst
   */
  export type UserPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findFirstOrThrow
   */
  export type UserPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findMany
   */
  export type UserPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences create
   */
  export type UserPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreferences.
     */
    data: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
  }

  /**
   * UserPreferences createMany
   */
  export type UserPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreferences createManyAndReturn
   */
  export type UserPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreferences update
   */
  export type UserPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreferences.
     */
    data: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
    /**
     * Choose, which UserPreferences to update.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences updateMany
   */
  export type UserPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferencesWhereInput
  }

  /**
   * UserPreferences upsert
   */
  export type UserPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreferences to update in case it exists.
     */
    where: UserPreferencesWhereUniqueInput
    /**
     * In case the UserPreferences found by the `where` argument doesn't exist, create a new UserPreferences with this data.
     */
    create: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
    /**
     * In case the UserPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
  }

  /**
   * UserPreferences delete
   */
  export type UserPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter which UserPreferences to delete.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences deleteMany
   */
  export type UserPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferencesWhereInput
  }

  /**
   * UserPreferences without action
   */
  export type UserPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
  }


  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeAvgAggregateOutputType = {
    cookingTime: number | null
    servings: number | null
  }

  export type RecipeSumAggregateOutputType = {
    cookingTime: number | null
    servings: number | null
  }

  export type RecipeMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    cookingTime: number | null
    difficulty: $Enums.Difficulty | null
    cuisineType: string | null
    inspirationSource: string | null
    servings: number | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    cookingTime: number | null
    difficulty: $Enums.Difficulty | null
    cuisineType: string | null
    inspirationSource: string | null
    servings: number | null
    isPublic: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    title: number
    description: number
    ingredients: number
    instructions: number
    cookingTime: number
    difficulty: number
    cuisineType: number
    inspirationSource: number
    servings: number
    nutritionInfo: number
    tags: number
    isPublic: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecipeAvgAggregateInputType = {
    cookingTime?: true
    servings?: true
  }

  export type RecipeSumAggregateInputType = {
    cookingTime?: true
    servings?: true
  }

  export type RecipeMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    cookingTime?: true
    difficulty?: true
    cuisineType?: true
    inspirationSource?: true
    servings?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    cookingTime?: true
    difficulty?: true
    cuisineType?: true
    inspirationSource?: true
    servings?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ingredients?: true
    instructions?: true
    cookingTime?: true
    difficulty?: true
    cuisineType?: true
    inspirationSource?: true
    servings?: true
    nutritionInfo?: true
    tags?: true
    isPublic?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _avg?: RecipeAvgAggregateInputType
    _sum?: RecipeSumAggregateInputType
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: string
    title: string
    description: string | null
    ingredients: JsonValue
    instructions: string[]
    cookingTime: number
    difficulty: $Enums.Difficulty
    cuisineType: string | null
    inspirationSource: string | null
    servings: number
    nutritionInfo: JsonValue | null
    tags: string[]
    isPublic: boolean
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: RecipeCountAggregateOutputType | null
    _avg: RecipeAvgAggregateOutputType | null
    _sum: RecipeSumAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    cookingTime?: boolean
    difficulty?: boolean
    cuisineType?: boolean
    inspirationSource?: boolean
    servings?: boolean
    nutritionInfo?: boolean
    tags?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userRecipes?: boolean | Recipe$userRecipesArgs<ExtArgs>
    favoriteRecipes?: boolean | Recipe$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    cookingTime?: boolean
    difficulty?: boolean
    cuisineType?: boolean
    inspirationSource?: boolean
    servings?: boolean
    nutritionInfo?: boolean
    tags?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    ingredients?: boolean
    instructions?: boolean
    cookingTime?: boolean
    difficulty?: boolean
    cuisineType?: boolean
    inspirationSource?: boolean
    servings?: boolean
    nutritionInfo?: boolean
    tags?: boolean
    isPublic?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRecipes?: boolean | Recipe$userRecipesArgs<ExtArgs>
    favoriteRecipes?: boolean | Recipe$favoriteRecipesArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      userRecipes: Prisma.$UserRecipePayload<ExtArgs>[]
      favoriteRecipes: Prisma.$FavoriteRecipePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      ingredients: Prisma.JsonValue
      instructions: string[]
      cookingTime: number
      difficulty: $Enums.Difficulty
      cuisineType: string | null
      inspirationSource: string | null
      servings: number
      nutritionInfo: Prisma.JsonValue | null
      tags: string[]
      isPublic: boolean
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }

  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecipeFindUniqueArgs>(args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Recipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecipeFindFirstArgs>(args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecipeFindManyArgs>(args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
     */
    create<T extends RecipeCreateArgs>(args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Recipes.
     * @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecipeCreateManyArgs>(args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recipes and returns the data saved in the database.
     * @param {RecipeCreateManyAndReturnArgs} args - Arguments to create many Recipes.
     * @example
     * // Create many Recipes
     * const recipe = await prisma.recipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recipes and only return the `id`
     * const recipeWithIdOnly = await prisma.recipe.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, RecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
     */
    delete<T extends RecipeDeleteArgs>(args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecipeUpdateArgs>(args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecipeDeleteManyArgs>(args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecipeUpdateManyArgs>(args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
     */
    upsert<T extends RecipeUpsertArgs>(args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userRecipes<T extends Recipe$userRecipesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$userRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findMany"> | Null>
    favoriteRecipes<T extends Recipe$favoriteRecipesArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$favoriteRecipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recipe model
   */ 
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'String'>
    readonly title: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly ingredients: FieldRef<"Recipe", 'Json'>
    readonly instructions: FieldRef<"Recipe", 'String[]'>
    readonly cookingTime: FieldRef<"Recipe", 'Int'>
    readonly difficulty: FieldRef<"Recipe", 'Difficulty'>
    readonly cuisineType: FieldRef<"Recipe", 'String'>
    readonly inspirationSource: FieldRef<"Recipe", 'String'>
    readonly servings: FieldRef<"Recipe", 'Int'>
    readonly nutritionInfo: FieldRef<"Recipe", 'Json'>
    readonly tags: FieldRef<"Recipe", 'String[]'>
    readonly isPublic: FieldRef<"Recipe", 'Boolean'>
    readonly createdBy: FieldRef<"Recipe", 'String'>
    readonly createdAt: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }

  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }

  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recipe createManyAndReturn
   */
  export type RecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }

  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }

  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
  }

  /**
   * Recipe.userRecipes
   */
  export type Recipe$userRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    where?: UserRecipeWhereInput
    orderBy?: UserRecipeOrderByWithRelationInput | UserRecipeOrderByWithRelationInput[]
    cursor?: UserRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRecipeScalarFieldEnum | UserRecipeScalarFieldEnum[]
  }

  /**
   * Recipe.favoriteRecipes
   */
  export type Recipe$favoriteRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    cursor?: FavoriteRecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecipeInclude<ExtArgs> | null
  }


  /**
   * Model UserRecipe
   */

  export type AggregateUserRecipe = {
    _count: UserRecipeCountAggregateOutputType | null
    _avg: UserRecipeAvgAggregateOutputType | null
    _sum: UserRecipeSumAggregateOutputType | null
    _min: UserRecipeMinAggregateOutputType | null
    _max: UserRecipeMaxAggregateOutputType | null
  }

  export type UserRecipeAvgAggregateOutputType = {
    rating: number | null
  }

  export type UserRecipeSumAggregateOutputType = {
    rating: number | null
  }

  export type UserRecipeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: string | null
    rating: number | null
    notes: string | null
    cookedDate: Date | null
    isFavorite: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRecipeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: string | null
    rating: number | null
    notes: string | null
    cookedDate: Date | null
    isFavorite: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRecipeCountAggregateOutputType = {
    id: number
    userId: number
    recipeId: number
    rating: number
    notes: number
    cookedDate: number
    isFavorite: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserRecipeAvgAggregateInputType = {
    rating?: true
  }

  export type UserRecipeSumAggregateInputType = {
    rating?: true
  }

  export type UserRecipeMinAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    rating?: true
    notes?: true
    cookedDate?: true
    isFavorite?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRecipeMaxAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    rating?: true
    notes?: true
    cookedDate?: true
    isFavorite?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRecipeCountAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    rating?: true
    notes?: true
    cookedDate?: true
    isFavorite?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRecipe to aggregate.
     */
    where?: UserRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecipes to fetch.
     */
    orderBy?: UserRecipeOrderByWithRelationInput | UserRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRecipes
    **/
    _count?: true | UserRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRecipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRecipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRecipeMaxAggregateInputType
  }

  export type GetUserRecipeAggregateType<T extends UserRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRecipe[P]>
      : GetScalarType<T[P], AggregateUserRecipe[P]>
  }




  export type UserRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRecipeWhereInput
    orderBy?: UserRecipeOrderByWithAggregationInput | UserRecipeOrderByWithAggregationInput[]
    by: UserRecipeScalarFieldEnum[] | UserRecipeScalarFieldEnum
    having?: UserRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRecipeCountAggregateInputType | true
    _avg?: UserRecipeAvgAggregateInputType
    _sum?: UserRecipeSumAggregateInputType
    _min?: UserRecipeMinAggregateInputType
    _max?: UserRecipeMaxAggregateInputType
  }

  export type UserRecipeGroupByOutputType = {
    id: string
    userId: string
    recipeId: string
    rating: number | null
    notes: string | null
    cookedDate: Date | null
    isFavorite: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserRecipeCountAggregateOutputType | null
    _avg: UserRecipeAvgAggregateOutputType | null
    _sum: UserRecipeSumAggregateOutputType | null
    _min: UserRecipeMinAggregateOutputType | null
    _max: UserRecipeMaxAggregateOutputType | null
  }

  type GetUserRecipeGroupByPayload<T extends UserRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], UserRecipeGroupByOutputType[P]>
        }
      >
    >


  export type UserRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    rating?: boolean
    notes?: boolean
    cookedDate?: boolean
    isFavorite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRecipe"]>

  export type UserRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    rating?: boolean
    notes?: boolean
    cookedDate?: boolean
    isFavorite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRecipe"]>

  export type UserRecipeSelectScalar = {
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    rating?: boolean
    notes?: boolean
    cookedDate?: boolean
    isFavorite?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserRecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type UserRecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $UserRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRecipe"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      recipeId: string
      rating: number | null
      notes: string | null
      cookedDate: Date | null
      isFavorite: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userRecipe"]>
    composites: {}
  }

  type UserRecipeGetPayload<S extends boolean | null | undefined | UserRecipeDefaultArgs> = $Result.GetResult<Prisma.$UserRecipePayload, S>

  type UserRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRecipeCountAggregateInputType | true
    }

  export interface UserRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRecipe'], meta: { name: 'UserRecipe' } }
    /**
     * Find zero or one UserRecipe that matches the filter.
     * @param {UserRecipeFindUniqueArgs} args - Arguments to find a UserRecipe
     * @example
     * // Get one UserRecipe
     * const userRecipe = await prisma.userRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRecipeFindUniqueArgs>(args: SelectSubset<T, UserRecipeFindUniqueArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRecipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRecipeFindUniqueOrThrowArgs} args - Arguments to find a UserRecipe
     * @example
     * // Get one UserRecipe
     * const userRecipe = await prisma.userRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeFindFirstArgs} args - Arguments to find a UserRecipe
     * @example
     * // Get one UserRecipe
     * const userRecipe = await prisma.userRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRecipeFindFirstArgs>(args?: SelectSubset<T, UserRecipeFindFirstArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeFindFirstOrThrowArgs} args - Arguments to find a UserRecipe
     * @example
     * // Get one UserRecipe
     * const userRecipe = await prisma.userRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRecipes
     * const userRecipes = await prisma.userRecipe.findMany()
     * 
     * // Get first 10 UserRecipes
     * const userRecipes = await prisma.userRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRecipeWithIdOnly = await prisma.userRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRecipeFindManyArgs>(args?: SelectSubset<T, UserRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRecipe.
     * @param {UserRecipeCreateArgs} args - Arguments to create a UserRecipe.
     * @example
     * // Create one UserRecipe
     * const UserRecipe = await prisma.userRecipe.create({
     *   data: {
     *     // ... data to create a UserRecipe
     *   }
     * })
     * 
     */
    create<T extends UserRecipeCreateArgs>(args: SelectSubset<T, UserRecipeCreateArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRecipes.
     * @param {UserRecipeCreateManyArgs} args - Arguments to create many UserRecipes.
     * @example
     * // Create many UserRecipes
     * const userRecipe = await prisma.userRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRecipeCreateManyArgs>(args?: SelectSubset<T, UserRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRecipes and returns the data saved in the database.
     * @param {UserRecipeCreateManyAndReturnArgs} args - Arguments to create many UserRecipes.
     * @example
     * // Create many UserRecipes
     * const userRecipe = await prisma.userRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRecipes and only return the `id`
     * const userRecipeWithIdOnly = await prisma.userRecipe.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserRecipe.
     * @param {UserRecipeDeleteArgs} args - Arguments to delete one UserRecipe.
     * @example
     * // Delete one UserRecipe
     * const UserRecipe = await prisma.userRecipe.delete({
     *   where: {
     *     // ... filter to delete one UserRecipe
     *   }
     * })
     * 
     */
    delete<T extends UserRecipeDeleteArgs>(args: SelectSubset<T, UserRecipeDeleteArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRecipe.
     * @param {UserRecipeUpdateArgs} args - Arguments to update one UserRecipe.
     * @example
     * // Update one UserRecipe
     * const userRecipe = await prisma.userRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRecipeUpdateArgs>(args: SelectSubset<T, UserRecipeUpdateArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRecipes.
     * @param {UserRecipeDeleteManyArgs} args - Arguments to filter UserRecipes to delete.
     * @example
     * // Delete a few UserRecipes
     * const { count } = await prisma.userRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRecipeDeleteManyArgs>(args?: SelectSubset<T, UserRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRecipes
     * const userRecipe = await prisma.userRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRecipeUpdateManyArgs>(args: SelectSubset<T, UserRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRecipe.
     * @param {UserRecipeUpsertArgs} args - Arguments to update or create a UserRecipe.
     * @example
     * // Update or create a UserRecipe
     * const userRecipe = await prisma.userRecipe.upsert({
     *   create: {
     *     // ... data to create a UserRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRecipe we want to update
     *   }
     * })
     */
    upsert<T extends UserRecipeUpsertArgs>(args: SelectSubset<T, UserRecipeUpsertArgs<ExtArgs>>): Prisma__UserRecipeClient<$Result.GetResult<Prisma.$UserRecipePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeCountArgs} args - Arguments to filter UserRecipes to count.
     * @example
     * // Count the number of UserRecipes
     * const count = await prisma.userRecipe.count({
     *   where: {
     *     // ... the filter for the UserRecipes we want to count
     *   }
     * })
    **/
    count<T extends UserRecipeCountArgs>(
      args?: Subset<T, UserRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRecipeAggregateArgs>(args: Subset<T, UserRecipeAggregateArgs>): Prisma.PrismaPromise<GetUserRecipeAggregateType<T>>

    /**
     * Group by UserRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRecipeGroupByArgs['orderBy'] }
        : { orderBy?: UserRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRecipe model
   */
  readonly fields: UserRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRecipe model
   */ 
  interface UserRecipeFieldRefs {
    readonly id: FieldRef<"UserRecipe", 'String'>
    readonly userId: FieldRef<"UserRecipe", 'String'>
    readonly recipeId: FieldRef<"UserRecipe", 'String'>
    readonly rating: FieldRef<"UserRecipe", 'Int'>
    readonly notes: FieldRef<"UserRecipe", 'String'>
    readonly cookedDate: FieldRef<"UserRecipe", 'DateTime'>
    readonly isFavorite: FieldRef<"UserRecipe", 'Boolean'>
    readonly createdAt: FieldRef<"UserRecipe", 'DateTime'>
    readonly updatedAt: FieldRef<"UserRecipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRecipe findUnique
   */
  export type UserRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * Filter, which UserRecipe to fetch.
     */
    where: UserRecipeWhereUniqueInput
  }

  /**
   * UserRecipe findUniqueOrThrow
   */
  export type UserRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * Filter, which UserRecipe to fetch.
     */
    where: UserRecipeWhereUniqueInput
  }

  /**
   * UserRecipe findFirst
   */
  export type UserRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * Filter, which UserRecipe to fetch.
     */
    where?: UserRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecipes to fetch.
     */
    orderBy?: UserRecipeOrderByWithRelationInput | UserRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRecipes.
     */
    cursor?: UserRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRecipes.
     */
    distinct?: UserRecipeScalarFieldEnum | UserRecipeScalarFieldEnum[]
  }

  /**
   * UserRecipe findFirstOrThrow
   */
  export type UserRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * Filter, which UserRecipe to fetch.
     */
    where?: UserRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecipes to fetch.
     */
    orderBy?: UserRecipeOrderByWithRelationInput | UserRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRecipes.
     */
    cursor?: UserRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRecipes.
     */
    distinct?: UserRecipeScalarFieldEnum | UserRecipeScalarFieldEnum[]
  }

  /**
   * UserRecipe findMany
   */
  export type UserRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * Filter, which UserRecipes to fetch.
     */
    where?: UserRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRecipes to fetch.
     */
    orderBy?: UserRecipeOrderByWithRelationInput | UserRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRecipes.
     */
    cursor?: UserRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRecipes.
     */
    skip?: number
    distinct?: UserRecipeScalarFieldEnum | UserRecipeScalarFieldEnum[]
  }

  /**
   * UserRecipe create
   */
  export type UserRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRecipe.
     */
    data: XOR<UserRecipeCreateInput, UserRecipeUncheckedCreateInput>
  }

  /**
   * UserRecipe createMany
   */
  export type UserRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRecipes.
     */
    data: UserRecipeCreateManyInput | UserRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRecipe createManyAndReturn
   */
  export type UserRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRecipes.
     */
    data: UserRecipeCreateManyInput | UserRecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRecipe update
   */
  export type UserRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRecipe.
     */
    data: XOR<UserRecipeUpdateInput, UserRecipeUncheckedUpdateInput>
    /**
     * Choose, which UserRecipe to update.
     */
    where: UserRecipeWhereUniqueInput
  }

  /**
   * UserRecipe updateMany
   */
  export type UserRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRecipes.
     */
    data: XOR<UserRecipeUpdateManyMutationInput, UserRecipeUncheckedUpdateManyInput>
    /**
     * Filter which UserRecipes to update
     */
    where?: UserRecipeWhereInput
  }

  /**
   * UserRecipe upsert
   */
  export type UserRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRecipe to update in case it exists.
     */
    where: UserRecipeWhereUniqueInput
    /**
     * In case the UserRecipe found by the `where` argument doesn't exist, create a new UserRecipe with this data.
     */
    create: XOR<UserRecipeCreateInput, UserRecipeUncheckedCreateInput>
    /**
     * In case the UserRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRecipeUpdateInput, UserRecipeUncheckedUpdateInput>
  }

  /**
   * UserRecipe delete
   */
  export type UserRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
    /**
     * Filter which UserRecipe to delete.
     */
    where: UserRecipeWhereUniqueInput
  }

  /**
   * UserRecipe deleteMany
   */
  export type UserRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRecipes to delete
     */
    where?: UserRecipeWhereInput
  }

  /**
   * UserRecipe without action
   */
  export type UserRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRecipe
     */
    select?: UserRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRecipeInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteRecipe
   */

  export type AggregateFavoriteRecipe = {
    _count: FavoriteRecipeCountAggregateOutputType | null
    _min: FavoriteRecipeMinAggregateOutputType | null
    _max: FavoriteRecipeMaxAggregateOutputType | null
  }

  export type FavoriteRecipeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: string | null
    createdAt: Date | null
  }

  export type FavoriteRecipeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    recipeId: string | null
    createdAt: Date | null
  }

  export type FavoriteRecipeCountAggregateOutputType = {
    id: number
    userId: number
    recipeId: number
    createdAt: number
    _all: number
  }


  export type FavoriteRecipeMinAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    createdAt?: true
  }

  export type FavoriteRecipeMaxAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    createdAt?: true
  }

  export type FavoriteRecipeCountAggregateInputType = {
    id?: true
    userId?: true
    recipeId?: true
    createdAt?: true
    _all?: true
  }

  export type FavoriteRecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteRecipe to aggregate.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteRecipes
    **/
    _count?: true | FavoriteRecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteRecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteRecipeMaxAggregateInputType
  }

  export type GetFavoriteRecipeAggregateType<T extends FavoriteRecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteRecipe[P]>
      : GetScalarType<T[P], AggregateFavoriteRecipe[P]>
  }




  export type FavoriteRecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteRecipeWhereInput
    orderBy?: FavoriteRecipeOrderByWithAggregationInput | FavoriteRecipeOrderByWithAggregationInput[]
    by: FavoriteRecipeScalarFieldEnum[] | FavoriteRecipeScalarFieldEnum
    having?: FavoriteRecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteRecipeCountAggregateInputType | true
    _min?: FavoriteRecipeMinAggregateInputType
    _max?: FavoriteRecipeMaxAggregateInputType
  }

  export type FavoriteRecipeGroupByOutputType = {
    id: string
    userId: string
    recipeId: string
    createdAt: Date
    _count: FavoriteRecipeCountAggregateOutputType | null
    _min: FavoriteRecipeMinAggregateOutputType | null
    _max: FavoriteRecipeMaxAggregateOutputType | null
  }

  type GetFavoriteRecipeGroupByPayload<T extends FavoriteRecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteRecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteRecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteRecipeGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteRecipeGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteRecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteRecipe"]>

  export type FavoriteRecipeSelectScalar = {
    id?: boolean
    userId?: boolean
    recipeId?: boolean
    createdAt?: boolean
  }

  export type FavoriteRecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }
  export type FavoriteRecipeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
  }

  export type $FavoriteRecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteRecipe"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      recipe: Prisma.$RecipePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      recipeId: string
      createdAt: Date
    }, ExtArgs["result"]["favoriteRecipe"]>
    composites: {}
  }

  type FavoriteRecipeGetPayload<S extends boolean | null | undefined | FavoriteRecipeDefaultArgs> = $Result.GetResult<Prisma.$FavoriteRecipePayload, S>

  type FavoriteRecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavoriteRecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavoriteRecipeCountAggregateInputType | true
    }

  export interface FavoriteRecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteRecipe'], meta: { name: 'FavoriteRecipe' } }
    /**
     * Find zero or one FavoriteRecipe that matches the filter.
     * @param {FavoriteRecipeFindUniqueArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteRecipeFindUniqueArgs>(args: SelectSubset<T, FavoriteRecipeFindUniqueArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FavoriteRecipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FavoriteRecipeFindUniqueOrThrowArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteRecipeFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FavoriteRecipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindFirstArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteRecipeFindFirstArgs>(args?: SelectSubset<T, FavoriteRecipeFindFirstArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FavoriteRecipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindFirstOrThrowArgs} args - Arguments to find a FavoriteRecipe
     * @example
     * // Get one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteRecipeFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteRecipeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FavoriteRecipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteRecipes
     * const favoriteRecipes = await prisma.favoriteRecipe.findMany()
     * 
     * // Get first 10 FavoriteRecipes
     * const favoriteRecipes = await prisma.favoriteRecipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteRecipeFindManyArgs>(args?: SelectSubset<T, FavoriteRecipeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FavoriteRecipe.
     * @param {FavoriteRecipeCreateArgs} args - Arguments to create a FavoriteRecipe.
     * @example
     * // Create one FavoriteRecipe
     * const FavoriteRecipe = await prisma.favoriteRecipe.create({
     *   data: {
     *     // ... data to create a FavoriteRecipe
     *   }
     * })
     * 
     */
    create<T extends FavoriteRecipeCreateArgs>(args: SelectSubset<T, FavoriteRecipeCreateArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FavoriteRecipes.
     * @param {FavoriteRecipeCreateManyArgs} args - Arguments to create many FavoriteRecipes.
     * @example
     * // Create many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteRecipeCreateManyArgs>(args?: SelectSubset<T, FavoriteRecipeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteRecipes and returns the data saved in the database.
     * @param {FavoriteRecipeCreateManyAndReturnArgs} args - Arguments to create many FavoriteRecipes.
     * @example
     * // Create many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteRecipes and only return the `id`
     * const favoriteRecipeWithIdOnly = await prisma.favoriteRecipe.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteRecipeCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteRecipeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FavoriteRecipe.
     * @param {FavoriteRecipeDeleteArgs} args - Arguments to delete one FavoriteRecipe.
     * @example
     * // Delete one FavoriteRecipe
     * const FavoriteRecipe = await prisma.favoriteRecipe.delete({
     *   where: {
     *     // ... filter to delete one FavoriteRecipe
     *   }
     * })
     * 
     */
    delete<T extends FavoriteRecipeDeleteArgs>(args: SelectSubset<T, FavoriteRecipeDeleteArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FavoriteRecipe.
     * @param {FavoriteRecipeUpdateArgs} args - Arguments to update one FavoriteRecipe.
     * @example
     * // Update one FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteRecipeUpdateArgs>(args: SelectSubset<T, FavoriteRecipeUpdateArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FavoriteRecipes.
     * @param {FavoriteRecipeDeleteManyArgs} args - Arguments to filter FavoriteRecipes to delete.
     * @example
     * // Delete a few FavoriteRecipes
     * const { count } = await prisma.favoriteRecipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteRecipeDeleteManyArgs>(args?: SelectSubset<T, FavoriteRecipeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteRecipes
     * const favoriteRecipe = await prisma.favoriteRecipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteRecipeUpdateManyArgs>(args: SelectSubset<T, FavoriteRecipeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavoriteRecipe.
     * @param {FavoriteRecipeUpsertArgs} args - Arguments to update or create a FavoriteRecipe.
     * @example
     * // Update or create a FavoriteRecipe
     * const favoriteRecipe = await prisma.favoriteRecipe.upsert({
     *   create: {
     *     // ... data to create a FavoriteRecipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteRecipe we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteRecipeUpsertArgs>(args: SelectSubset<T, FavoriteRecipeUpsertArgs<ExtArgs>>): Prisma__FavoriteRecipeClient<$Result.GetResult<Prisma.$FavoriteRecipePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FavoriteRecipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeCountArgs} args - Arguments to filter FavoriteRecipes to count.
     * @example
     * // Count the number of FavoriteRecipes
     * const count = await prisma.favoriteRecipe.count({
     *   where: {
     *     // ... the filter for the FavoriteRecipes we want to count
     *   }
     * })
    **/
    count<T extends FavoriteRecipeCountArgs>(
      args?: Subset<T, FavoriteRecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteRecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteRecipeAggregateArgs>(args: Subset<T, FavoriteRecipeAggregateArgs>): Prisma.PrismaPromise<GetFavoriteRecipeAggregateType<T>>

    /**
     * Group by FavoriteRecipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteRecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteRecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteRecipeGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteRecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteRecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteRecipe model
   */
  readonly fields: FavoriteRecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteRecipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteRecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteRecipe model
   */ 
  interface FavoriteRecipeFieldRefs {
    readonly id: FieldRef<"FavoriteRecipe", 'String'>
    readonly userId: FieldRef<"FavoriteRecipe", 'String'>
    readonly recipeId: FieldRef<"FavoriteRecipe", 'String'>
    readonly createdAt: FieldRef<"FavoriteRecipe", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteRecipe findUnique
   */
  export type FavoriteRecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe findUniqueOrThrow
   */
  export type FavoriteRecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe findFirst
   */
  export type FavoriteRecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteRecipes.
     */
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe findFirstOrThrow
   */
  export type FavoriteRecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipe to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteRecipes.
     */
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe findMany
   */
  export type FavoriteRecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteRecipes to fetch.
     */
    where?: FavoriteRecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteRecipes to fetch.
     */
    orderBy?: FavoriteRecipeOrderByWithRelationInput | FavoriteRecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteRecipes.
     */
    cursor?: FavoriteRecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteRecipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteRecipes.
     */
    skip?: number
    distinct?: FavoriteRecipeScalarFieldEnum | FavoriteRecipeScalarFieldEnum[]
  }

  /**
   * FavoriteRecipe create
   */
  export type FavoriteRecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteRecipe.
     */
    data: XOR<FavoriteRecipeCreateInput, FavoriteRecipeUncheckedCreateInput>
  }

  /**
   * FavoriteRecipe createMany
   */
  export type FavoriteRecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteRecipes.
     */
    data: FavoriteRecipeCreateManyInput | FavoriteRecipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteRecipe createManyAndReturn
   */
  export type FavoriteRecipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FavoriteRecipes.
     */
    data: FavoriteRecipeCreateManyInput | FavoriteRecipeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteRecipe update
   */
  export type FavoriteRecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteRecipe.
     */
    data: XOR<FavoriteRecipeUpdateInput, FavoriteRecipeUncheckedUpdateInput>
    /**
     * Choose, which FavoriteRecipe to update.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe updateMany
   */
  export type FavoriteRecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteRecipes.
     */
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteRecipes to update
     */
    where?: FavoriteRecipeWhereInput
  }

  /**
   * FavoriteRecipe upsert
   */
  export type FavoriteRecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteRecipe to update in case it exists.
     */
    where: FavoriteRecipeWhereUniqueInput
    /**
     * In case the FavoriteRecipe found by the `where` argument doesn't exist, create a new FavoriteRecipe with this data.
     */
    create: XOR<FavoriteRecipeCreateInput, FavoriteRecipeUncheckedCreateInput>
    /**
     * In case the FavoriteRecipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteRecipeUpdateInput, FavoriteRecipeUncheckedUpdateInput>
  }

  /**
   * FavoriteRecipe delete
   */
  export type FavoriteRecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
    /**
     * Filter which FavoriteRecipe to delete.
     */
    where: FavoriteRecipeWhereUniqueInput
  }

  /**
   * FavoriteRecipe deleteMany
   */
  export type FavoriteRecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteRecipes to delete
     */
    where?: FavoriteRecipeWhereInput
  }

  /**
   * FavoriteRecipe without action
   */
  export type FavoriteRecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteRecipe
     */
    select?: FavoriteRecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteRecipeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    location: 'location',
    timezone: 'timezone',
    dinnerTimePreference: 'dinnerTimePreference',
    spiceTolerance: 'spiceTolerance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserPreferencesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    dietaryRestrictions: 'dietaryRestrictions',
    allergies: 'allergies',
    favoriteIngredients: 'favoriteIngredients',
    dislikedFoods: 'dislikedFoods',
    favoriteCuisines: 'favoriteCuisines',
    favoriteDishes: 'favoriteDishes',
    favoriteChefs: 'favoriteChefs',
    favoriteRestaurants: 'favoriteRestaurants',
    cookingSkillLevel: 'cookingSkillLevel',
    preferredCookingTime: 'preferredCookingTime',
    servingSize: 'servingSize',
    nutritionalGoals: 'nutritionalGoals',
    budgetPreference: 'budgetPreference',
    preferredMealTypes: 'preferredMealTypes',
    availableEquipment: 'availableEquipment',
    mealComplexity: 'mealComplexity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPreferencesScalarFieldEnum = (typeof UserPreferencesScalarFieldEnum)[keyof typeof UserPreferencesScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    ingredients: 'ingredients',
    instructions: 'instructions',
    cookingTime: 'cookingTime',
    difficulty: 'difficulty',
    cuisineType: 'cuisineType',
    inspirationSource: 'inspirationSource',
    servings: 'servings',
    nutritionInfo: 'nutritionInfo',
    tags: 'tags',
    isPublic: 'isPublic',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const UserRecipeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    recipeId: 'recipeId',
    rating: 'rating',
    notes: 'notes',
    cookedDate: 'cookedDate',
    isFavorite: 'isFavorite',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserRecipeScalarFieldEnum = (typeof UserRecipeScalarFieldEnum)[keyof typeof UserRecipeScalarFieldEnum]


  export const FavoriteRecipeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    recipeId: 'recipeId',
    createdAt: 'createdAt'
  };

  export type FavoriteRecipeScalarFieldEnum = (typeof FavoriteRecipeScalarFieldEnum)[keyof typeof FavoriteRecipeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'SpiceTolerance'
   */
  export type EnumSpiceToleranceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SpiceTolerance'>
    


  /**
   * Reference to a field of type 'SpiceTolerance[]'
   */
  export type ListEnumSpiceToleranceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SpiceTolerance[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SkillLevel'
   */
  export type EnumSkillLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillLevel'>
    


  /**
   * Reference to a field of type 'SkillLevel[]'
   */
  export type ListEnumSkillLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SkillLevel[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'NutritionalGoal[]'
   */
  export type ListEnumNutritionalGoalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NutritionalGoal[]'>
    


  /**
   * Reference to a field of type 'NutritionalGoal'
   */
  export type EnumNutritionalGoalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NutritionalGoal'>
    


  /**
   * Reference to a field of type 'BudgetPreference'
   */
  export type EnumBudgetPreferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BudgetPreference'>
    


  /**
   * Reference to a field of type 'BudgetPreference[]'
   */
  export type ListEnumBudgetPreferenceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BudgetPreference[]'>
    


  /**
   * Reference to a field of type 'MealType[]'
   */
  export type ListEnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType[]'>
    


  /**
   * Reference to a field of type 'MealType'
   */
  export type EnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType'>
    


  /**
   * Reference to a field of type 'CookingEquipment[]'
   */
  export type ListEnumCookingEquipmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CookingEquipment[]'>
    


  /**
   * Reference to a field of type 'CookingEquipment'
   */
  export type EnumCookingEquipmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CookingEquipment'>
    


  /**
   * Reference to a field of type 'MealComplexity'
   */
  export type EnumMealComplexityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealComplexity'>
    


  /**
   * Reference to a field of type 'MealComplexity[]'
   */
  export type ListEnumMealComplexityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealComplexity[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Difficulty[]'
   */
  export type ListEnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    location?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    dinnerTimePreference?: StringNullableFilter<"User"> | string | null
    spiceTolerance?: EnumSpiceToleranceFilter<"User"> | $Enums.SpiceTolerance
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    preferences?: XOR<UserPreferencesNullableRelationFilter, UserPreferencesWhereInput> | null
    userRecipes?: UserRecipeListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    dinnerTimePreference?: SortOrderInput | SortOrder
    spiceTolerance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    preferences?: UserPreferencesOrderByWithRelationInput
    userRecipes?: UserRecipeOrderByRelationAggregateInput
    favoriteRecipes?: FavoriteRecipeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    location?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    dinnerTimePreference?: StringNullableFilter<"User"> | string | null
    spiceTolerance?: EnumSpiceToleranceFilter<"User"> | $Enums.SpiceTolerance
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    preferences?: XOR<UserPreferencesNullableRelationFilter, UserPreferencesWhereInput> | null
    userRecipes?: UserRecipeListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    location?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    dinnerTimePreference?: SortOrderInput | SortOrder
    spiceTolerance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    location?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    dinnerTimePreference?: StringNullableWithAggregatesFilter<"User"> | string | null
    spiceTolerance?: EnumSpiceToleranceWithAggregatesFilter<"User"> | $Enums.SpiceTolerance
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserPreferencesWhereInput = {
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    id?: StringFilter<"UserPreferences"> | string
    userId?: StringFilter<"UserPreferences"> | string
    dietaryRestrictions?: StringNullableListFilter<"UserPreferences">
    allergies?: StringNullableListFilter<"UserPreferences">
    favoriteIngredients?: StringNullableListFilter<"UserPreferences">
    dislikedFoods?: StringNullableListFilter<"UserPreferences">
    favoriteCuisines?: StringNullableListFilter<"UserPreferences">
    favoriteDishes?: StringNullableListFilter<"UserPreferences">
    favoriteChefs?: StringNullableListFilter<"UserPreferences">
    favoriteRestaurants?: StringNullableListFilter<"UserPreferences">
    cookingSkillLevel?: EnumSkillLevelFilter<"UserPreferences"> | $Enums.SkillLevel
    preferredCookingTime?: IntNullableFilter<"UserPreferences"> | number | null
    servingSize?: IntNullableFilter<"UserPreferences"> | number | null
    nutritionalGoals?: EnumNutritionalGoalNullableListFilter<"UserPreferences">
    budgetPreference?: EnumBudgetPreferenceFilter<"UserPreferences"> | $Enums.BudgetPreference
    preferredMealTypes?: EnumMealTypeNullableListFilter<"UserPreferences">
    availableEquipment?: EnumCookingEquipmentNullableListFilter<"UserPreferences">
    mealComplexity?: EnumMealComplexityFilter<"UserPreferences"> | $Enums.MealComplexity
    createdAt?: DateTimeFilter<"UserPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreferences"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferencesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    dietaryRestrictions?: SortOrder
    allergies?: SortOrder
    favoriteIngredients?: SortOrder
    dislikedFoods?: SortOrder
    favoriteCuisines?: SortOrder
    favoriteDishes?: SortOrder
    favoriteChefs?: SortOrder
    favoriteRestaurants?: SortOrder
    cookingSkillLevel?: SortOrder
    preferredCookingTime?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    nutritionalGoals?: SortOrder
    budgetPreference?: SortOrder
    preferredMealTypes?: SortOrder
    availableEquipment?: SortOrder
    mealComplexity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferencesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    dietaryRestrictions?: StringNullableListFilter<"UserPreferences">
    allergies?: StringNullableListFilter<"UserPreferences">
    favoriteIngredients?: StringNullableListFilter<"UserPreferences">
    dislikedFoods?: StringNullableListFilter<"UserPreferences">
    favoriteCuisines?: StringNullableListFilter<"UserPreferences">
    favoriteDishes?: StringNullableListFilter<"UserPreferences">
    favoriteChefs?: StringNullableListFilter<"UserPreferences">
    favoriteRestaurants?: StringNullableListFilter<"UserPreferences">
    cookingSkillLevel?: EnumSkillLevelFilter<"UserPreferences"> | $Enums.SkillLevel
    preferredCookingTime?: IntNullableFilter<"UserPreferences"> | number | null
    servingSize?: IntNullableFilter<"UserPreferences"> | number | null
    nutritionalGoals?: EnumNutritionalGoalNullableListFilter<"UserPreferences">
    budgetPreference?: EnumBudgetPreferenceFilter<"UserPreferences"> | $Enums.BudgetPreference
    preferredMealTypes?: EnumMealTypeNullableListFilter<"UserPreferences">
    availableEquipment?: EnumCookingEquipmentNullableListFilter<"UserPreferences">
    mealComplexity?: EnumMealComplexityFilter<"UserPreferences"> | $Enums.MealComplexity
    createdAt?: DateTimeFilter<"UserPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"UserPreferences"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserPreferencesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    dietaryRestrictions?: SortOrder
    allergies?: SortOrder
    favoriteIngredients?: SortOrder
    dislikedFoods?: SortOrder
    favoriteCuisines?: SortOrder
    favoriteDishes?: SortOrder
    favoriteChefs?: SortOrder
    favoriteRestaurants?: SortOrder
    cookingSkillLevel?: SortOrder
    preferredCookingTime?: SortOrderInput | SortOrder
    servingSize?: SortOrderInput | SortOrder
    nutritionalGoals?: SortOrder
    budgetPreference?: SortOrder
    preferredMealTypes?: SortOrder
    availableEquipment?: SortOrder
    mealComplexity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPreferencesCountOrderByAggregateInput
    _avg?: UserPreferencesAvgOrderByAggregateInput
    _max?: UserPreferencesMaxOrderByAggregateInput
    _min?: UserPreferencesMinOrderByAggregateInput
    _sum?: UserPreferencesSumOrderByAggregateInput
  }

  export type UserPreferencesScalarWhereWithAggregatesInput = {
    AND?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    OR?: UserPreferencesScalarWhereWithAggregatesInput[]
    NOT?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPreferences"> | string
    userId?: StringWithAggregatesFilter<"UserPreferences"> | string
    dietaryRestrictions?: StringNullableListFilter<"UserPreferences">
    allergies?: StringNullableListFilter<"UserPreferences">
    favoriteIngredients?: StringNullableListFilter<"UserPreferences">
    dislikedFoods?: StringNullableListFilter<"UserPreferences">
    favoriteCuisines?: StringNullableListFilter<"UserPreferences">
    favoriteDishes?: StringNullableListFilter<"UserPreferences">
    favoriteChefs?: StringNullableListFilter<"UserPreferences">
    favoriteRestaurants?: StringNullableListFilter<"UserPreferences">
    cookingSkillLevel?: EnumSkillLevelWithAggregatesFilter<"UserPreferences"> | $Enums.SkillLevel
    preferredCookingTime?: IntNullableWithAggregatesFilter<"UserPreferences"> | number | null
    servingSize?: IntNullableWithAggregatesFilter<"UserPreferences"> | number | null
    nutritionalGoals?: EnumNutritionalGoalNullableListFilter<"UserPreferences">
    budgetPreference?: EnumBudgetPreferenceWithAggregatesFilter<"UserPreferences"> | $Enums.BudgetPreference
    preferredMealTypes?: EnumMealTypeNullableListFilter<"UserPreferences">
    availableEquipment?: EnumCookingEquipmentNullableListFilter<"UserPreferences">
    mealComplexity?: EnumMealComplexityWithAggregatesFilter<"UserPreferences"> | $Enums.MealComplexity
    createdAt?: DateTimeWithAggregatesFilter<"UserPreferences"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPreferences"> | Date | string
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: StringFilter<"Recipe"> | string
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: JsonFilter<"Recipe">
    instructions?: StringNullableListFilter<"Recipe">
    cookingTime?: IntFilter<"Recipe"> | number
    difficulty?: EnumDifficultyFilter<"Recipe"> | $Enums.Difficulty
    cuisineType?: StringNullableFilter<"Recipe"> | string | null
    inspirationSource?: StringNullableFilter<"Recipe"> | string | null
    servings?: IntFilter<"Recipe"> | number
    nutritionInfo?: JsonNullableFilter<"Recipe">
    tags?: StringNullableListFilter<"Recipe">
    isPublic?: BoolFilter<"Recipe"> | boolean
    createdBy?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    userRecipes?: UserRecipeListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    ingredients?: SortOrder
    instructions?: SortOrder
    cookingTime?: SortOrder
    difficulty?: SortOrder
    cuisineType?: SortOrderInput | SortOrder
    inspirationSource?: SortOrderInput | SortOrder
    servings?: SortOrder
    nutritionInfo?: SortOrderInput | SortOrder
    tags?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userRecipes?: UserRecipeOrderByRelationAggregateInput
    favoriteRecipes?: FavoriteRecipeOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    title?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    ingredients?: JsonFilter<"Recipe">
    instructions?: StringNullableListFilter<"Recipe">
    cookingTime?: IntFilter<"Recipe"> | number
    difficulty?: EnumDifficultyFilter<"Recipe"> | $Enums.Difficulty
    cuisineType?: StringNullableFilter<"Recipe"> | string | null
    inspirationSource?: StringNullableFilter<"Recipe"> | string | null
    servings?: IntFilter<"Recipe"> | number
    nutritionInfo?: JsonNullableFilter<"Recipe">
    tags?: StringNullableListFilter<"Recipe">
    isPublic?: BoolFilter<"Recipe"> | boolean
    createdBy?: StringNullableFilter<"Recipe"> | string | null
    createdAt?: DateTimeFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeFilter<"Recipe"> | Date | string
    userRecipes?: UserRecipeListRelationFilter
    favoriteRecipes?: FavoriteRecipeListRelationFilter
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    ingredients?: SortOrder
    instructions?: SortOrder
    cookingTime?: SortOrder
    difficulty?: SortOrder
    cuisineType?: SortOrderInput | SortOrder
    inspirationSource?: SortOrderInput | SortOrder
    servings?: SortOrder
    nutritionInfo?: SortOrderInput | SortOrder
    tags?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _avg?: RecipeAvgOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
    _sum?: RecipeSumOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipe"> | string
    title?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    ingredients?: JsonWithAggregatesFilter<"Recipe">
    instructions?: StringNullableListFilter<"Recipe">
    cookingTime?: IntWithAggregatesFilter<"Recipe"> | number
    difficulty?: EnumDifficultyWithAggregatesFilter<"Recipe"> | $Enums.Difficulty
    cuisineType?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    inspirationSource?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    servings?: IntWithAggregatesFilter<"Recipe"> | number
    nutritionInfo?: JsonNullableWithAggregatesFilter<"Recipe">
    tags?: StringNullableListFilter<"Recipe">
    isPublic?: BoolWithAggregatesFilter<"Recipe"> | boolean
    createdBy?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recipe"> | Date | string
  }

  export type UserRecipeWhereInput = {
    AND?: UserRecipeWhereInput | UserRecipeWhereInput[]
    OR?: UserRecipeWhereInput[]
    NOT?: UserRecipeWhereInput | UserRecipeWhereInput[]
    id?: StringFilter<"UserRecipe"> | string
    userId?: StringFilter<"UserRecipe"> | string
    recipeId?: StringFilter<"UserRecipe"> | string
    rating?: IntNullableFilter<"UserRecipe"> | number | null
    notes?: StringNullableFilter<"UserRecipe"> | string | null
    cookedDate?: DateTimeNullableFilter<"UserRecipe"> | Date | string | null
    isFavorite?: BoolFilter<"UserRecipe"> | boolean
    createdAt?: DateTimeFilter<"UserRecipe"> | Date | string
    updatedAt?: DateTimeFilter<"UserRecipe"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }

  export type UserRecipeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    rating?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    cookedDate?: SortOrderInput | SortOrder
    isFavorite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    recipe?: RecipeOrderByWithRelationInput
  }

  export type UserRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_recipeId?: UserRecipeUserIdRecipeIdCompoundUniqueInput
    AND?: UserRecipeWhereInput | UserRecipeWhereInput[]
    OR?: UserRecipeWhereInput[]
    NOT?: UserRecipeWhereInput | UserRecipeWhereInput[]
    userId?: StringFilter<"UserRecipe"> | string
    recipeId?: StringFilter<"UserRecipe"> | string
    rating?: IntNullableFilter<"UserRecipe"> | number | null
    notes?: StringNullableFilter<"UserRecipe"> | string | null
    cookedDate?: DateTimeNullableFilter<"UserRecipe"> | Date | string | null
    isFavorite?: BoolFilter<"UserRecipe"> | boolean
    createdAt?: DateTimeFilter<"UserRecipe"> | Date | string
    updatedAt?: DateTimeFilter<"UserRecipe"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }, "id" | "userId_recipeId">

  export type UserRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    rating?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    cookedDate?: SortOrderInput | SortOrder
    isFavorite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserRecipeCountOrderByAggregateInput
    _avg?: UserRecipeAvgOrderByAggregateInput
    _max?: UserRecipeMaxOrderByAggregateInput
    _min?: UserRecipeMinOrderByAggregateInput
    _sum?: UserRecipeSumOrderByAggregateInput
  }

  export type UserRecipeScalarWhereWithAggregatesInput = {
    AND?: UserRecipeScalarWhereWithAggregatesInput | UserRecipeScalarWhereWithAggregatesInput[]
    OR?: UserRecipeScalarWhereWithAggregatesInput[]
    NOT?: UserRecipeScalarWhereWithAggregatesInput | UserRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRecipe"> | string
    userId?: StringWithAggregatesFilter<"UserRecipe"> | string
    recipeId?: StringWithAggregatesFilter<"UserRecipe"> | string
    rating?: IntNullableWithAggregatesFilter<"UserRecipe"> | number | null
    notes?: StringNullableWithAggregatesFilter<"UserRecipe"> | string | null
    cookedDate?: DateTimeNullableWithAggregatesFilter<"UserRecipe"> | Date | string | null
    isFavorite?: BoolWithAggregatesFilter<"UserRecipe"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserRecipe"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserRecipe"> | Date | string
  }

  export type FavoriteRecipeWhereInput = {
    AND?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    OR?: FavoriteRecipeWhereInput[]
    NOT?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    id?: StringFilter<"FavoriteRecipe"> | string
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: StringFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }

  export type FavoriteRecipeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    recipe?: RecipeOrderByWithRelationInput
  }

  export type FavoriteRecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_recipeId?: FavoriteRecipeUserIdRecipeIdCompoundUniqueInput
    AND?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    OR?: FavoriteRecipeWhereInput[]
    NOT?: FavoriteRecipeWhereInput | FavoriteRecipeWhereInput[]
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: StringFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
  }, "id" | "userId_recipeId">

  export type FavoriteRecipeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
    _count?: FavoriteRecipeCountOrderByAggregateInput
    _max?: FavoriteRecipeMaxOrderByAggregateInput
    _min?: FavoriteRecipeMinOrderByAggregateInput
  }

  export type FavoriteRecipeScalarWhereWithAggregatesInput = {
    AND?: FavoriteRecipeScalarWhereWithAggregatesInput | FavoriteRecipeScalarWhereWithAggregatesInput[]
    OR?: FavoriteRecipeScalarWhereWithAggregatesInput[]
    NOT?: FavoriteRecipeScalarWhereWithAggregatesInput | FavoriteRecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    userId?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    recipeId?: StringWithAggregatesFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FavoriteRecipe"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userRecipes?: UserRecipeCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userRecipes?: UserRecipeUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userRecipes?: UserRecipeUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userRecipes?: UserRecipeUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateInput = {
    id?: string
    dietaryRestrictions?: UserPreferencesCreatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesCreateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesCreatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesCreatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesCreatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesCreatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesCreatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesCreatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: $Enums.SkillLevel
    preferredCookingTime?: number | null
    servingSize?: number | null
    nutritionalGoals?: UserPreferencesCreatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesCreatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesCreateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: $Enums.MealComplexity
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPreferencesInput
  }

  export type UserPreferencesUncheckedCreateInput = {
    id?: string
    userId: string
    dietaryRestrictions?: UserPreferencesCreatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesCreateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesCreatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesCreatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesCreatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesCreatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesCreatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesCreatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: $Enums.SkillLevel
    preferredCookingTime?: number | null
    servingSize?: number | null
    nutritionalGoals?: UserPreferencesCreatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesCreatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesCreateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: $Enums.MealComplexity
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictions?: UserPreferencesUpdatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesUpdateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesUpdatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesUpdatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesUpdatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesUpdatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesUpdatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesUpdatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
    preferredCookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servingSize?: NullableIntFieldUpdateOperationsInput | number | null
    nutritionalGoals?: UserPreferencesUpdatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: EnumBudgetPreferenceFieldUpdateOperationsInput | $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesUpdatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesUpdateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: EnumMealComplexityFieldUpdateOperationsInput | $Enums.MealComplexity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dietaryRestrictions?: UserPreferencesUpdatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesUpdateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesUpdatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesUpdatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesUpdatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesUpdatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesUpdatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesUpdatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
    preferredCookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servingSize?: NullableIntFieldUpdateOperationsInput | number | null
    nutritionalGoals?: UserPreferencesUpdatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: EnumBudgetPreferenceFieldUpdateOperationsInput | $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesUpdatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesUpdateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: EnumMealComplexityFieldUpdateOperationsInput | $Enums.MealComplexity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateManyInput = {
    id?: string
    userId: string
    dietaryRestrictions?: UserPreferencesCreatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesCreateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesCreatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesCreatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesCreatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesCreatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesCreatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesCreatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: $Enums.SkillLevel
    preferredCookingTime?: number | null
    servingSize?: number | null
    nutritionalGoals?: UserPreferencesCreatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesCreatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesCreateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: $Enums.MealComplexity
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictions?: UserPreferencesUpdatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesUpdateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesUpdatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesUpdatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesUpdatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesUpdatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesUpdatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesUpdatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
    preferredCookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servingSize?: NullableIntFieldUpdateOperationsInput | number | null
    nutritionalGoals?: UserPreferencesUpdatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: EnumBudgetPreferenceFieldUpdateOperationsInput | $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesUpdatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesUpdateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: EnumMealComplexityFieldUpdateOperationsInput | $Enums.MealComplexity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    dietaryRestrictions?: UserPreferencesUpdatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesUpdateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesUpdatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesUpdatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesUpdatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesUpdatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesUpdatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesUpdatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
    preferredCookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servingSize?: NullableIntFieldUpdateOperationsInput | number | null
    nutritionalGoals?: UserPreferencesUpdatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: EnumBudgetPreferenceFieldUpdateOperationsInput | $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesUpdatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesUpdateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: EnumMealComplexityFieldUpdateOperationsInput | $Enums.MealComplexity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeCreateInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecipes?: UserRecipeCreateNestedManyWithoutRecipeInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecipes?: UserRecipeUncheckedCreateNestedManyWithoutRecipeInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecipes?: UserRecipeUpdateManyWithoutRecipeNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecipes?: UserRecipeUncheckedUpdateManyWithoutRecipeNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeCreateInput = {
    id?: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRecipesInput
    recipe: RecipeCreateNestedOneWithoutUserRecipesInput
  }

  export type UserRecipeUncheckedCreateInput = {
    id?: string
    userId: string
    recipeId: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRecipesNestedInput
    recipe?: RecipeUpdateOneRequiredWithoutUserRecipesNestedInput
  }

  export type UserRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeCreateManyInput = {
    id?: string
    userId: string
    recipeId: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteRecipesInput
    recipe: RecipeCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateInput = {
    id?: string
    userId: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput
    recipe?: RecipeUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeCreateManyInput = {
    id?: string
    userId: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumSpiceToleranceFilter<$PrismaModel = never> = {
    equals?: $Enums.SpiceTolerance | EnumSpiceToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSpiceToleranceFilter<$PrismaModel> | $Enums.SpiceTolerance
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserPreferencesNullableRelationFilter = {
    is?: UserPreferencesWhereInput | null
    isNot?: UserPreferencesWhereInput | null
  }

  export type UserRecipeListRelationFilter = {
    every?: UserRecipeWhereInput
    some?: UserRecipeWhereInput
    none?: UserRecipeWhereInput
  }

  export type FavoriteRecipeListRelationFilter = {
    every?: FavoriteRecipeWhereInput
    some?: FavoriteRecipeWhereInput
    none?: FavoriteRecipeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserRecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteRecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    location?: SortOrder
    timezone?: SortOrder
    dinnerTimePreference?: SortOrder
    spiceTolerance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    location?: SortOrder
    timezone?: SortOrder
    dinnerTimePreference?: SortOrder
    spiceTolerance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    location?: SortOrder
    timezone?: SortOrder
    dinnerTimePreference?: SortOrder
    spiceTolerance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumSpiceToleranceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SpiceTolerance | EnumSpiceToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSpiceToleranceWithAggregatesFilter<$PrismaModel> | $Enums.SpiceTolerance
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSpiceToleranceFilter<$PrismaModel>
    _max?: NestedEnumSpiceToleranceFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumSkillLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillLevel | EnumSkillLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillLevelFilter<$PrismaModel> | $Enums.SkillLevel
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumNutritionalGoalNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.NutritionalGoal[] | ListEnumNutritionalGoalFieldRefInput<$PrismaModel> | null
    has?: $Enums.NutritionalGoal | EnumNutritionalGoalFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.NutritionalGoal[] | ListEnumNutritionalGoalFieldRefInput<$PrismaModel>
    hasSome?: $Enums.NutritionalGoal[] | ListEnumNutritionalGoalFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumBudgetPreferenceFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetPreference | EnumBudgetPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetPreferenceFilter<$PrismaModel> | $Enums.BudgetPreference
  }

  export type EnumMealTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumCookingEquipmentNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.CookingEquipment[] | ListEnumCookingEquipmentFieldRefInput<$PrismaModel> | null
    has?: $Enums.CookingEquipment | EnumCookingEquipmentFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.CookingEquipment[] | ListEnumCookingEquipmentFieldRefInput<$PrismaModel>
    hasSome?: $Enums.CookingEquipment[] | ListEnumCookingEquipmentFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumMealComplexityFilter<$PrismaModel = never> = {
    equals?: $Enums.MealComplexity | EnumMealComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumMealComplexityFilter<$PrismaModel> | $Enums.MealComplexity
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserPreferencesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    dietaryRestrictions?: SortOrder
    allergies?: SortOrder
    favoriteIngredients?: SortOrder
    dislikedFoods?: SortOrder
    favoriteCuisines?: SortOrder
    favoriteDishes?: SortOrder
    favoriteChefs?: SortOrder
    favoriteRestaurants?: SortOrder
    cookingSkillLevel?: SortOrder
    preferredCookingTime?: SortOrder
    servingSize?: SortOrder
    nutritionalGoals?: SortOrder
    budgetPreference?: SortOrder
    preferredMealTypes?: SortOrder
    availableEquipment?: SortOrder
    mealComplexity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesAvgOrderByAggregateInput = {
    preferredCookingTime?: SortOrder
    servingSize?: SortOrder
  }

  export type UserPreferencesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cookingSkillLevel?: SortOrder
    preferredCookingTime?: SortOrder
    servingSize?: SortOrder
    budgetPreference?: SortOrder
    mealComplexity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cookingSkillLevel?: SortOrder
    preferredCookingTime?: SortOrder
    servingSize?: SortOrder
    budgetPreference?: SortOrder
    mealComplexity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPreferencesSumOrderByAggregateInput = {
    preferredCookingTime?: SortOrder
    servingSize?: SortOrder
  }

  export type EnumSkillLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillLevel | EnumSkillLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillLevelWithAggregatesFilter<$PrismaModel> | $Enums.SkillLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSkillLevelFilter<$PrismaModel>
    _max?: NestedEnumSkillLevelFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumBudgetPreferenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetPreference | EnumBudgetPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetPreferenceWithAggregatesFilter<$PrismaModel> | $Enums.BudgetPreference
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBudgetPreferenceFilter<$PrismaModel>
    _max?: NestedEnumBudgetPreferenceFilter<$PrismaModel>
  }

  export type EnumMealComplexityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealComplexity | EnumMealComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumMealComplexityWithAggregatesFilter<$PrismaModel> | $Enums.MealComplexity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealComplexityFilter<$PrismaModel>
    _max?: NestedEnumMealComplexityFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ingredients?: SortOrder
    instructions?: SortOrder
    cookingTime?: SortOrder
    difficulty?: SortOrder
    cuisineType?: SortOrder
    inspirationSource?: SortOrder
    servings?: SortOrder
    nutritionInfo?: SortOrder
    tags?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeAvgOrderByAggregateInput = {
    cookingTime?: SortOrder
    servings?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    cookingTime?: SortOrder
    difficulty?: SortOrder
    cuisineType?: SortOrder
    inspirationSource?: SortOrder
    servings?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    cookingTime?: SortOrder
    difficulty?: SortOrder
    cuisineType?: SortOrder
    inspirationSource?: SortOrder
    servings?: SortOrder
    isPublic?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecipeSumOrderByAggregateInput = {
    cookingTime?: SortOrder
    servings?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type RecipeRelationFilter = {
    is?: RecipeWhereInput
    isNot?: RecipeWhereInput
  }

  export type UserRecipeUserIdRecipeIdCompoundUniqueInput = {
    userId: string
    recipeId: string
  }

  export type UserRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    rating?: SortOrder
    notes?: SortOrder
    cookedDate?: SortOrder
    isFavorite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRecipeAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type UserRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    rating?: SortOrder
    notes?: SortOrder
    cookedDate?: SortOrder
    isFavorite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    rating?: SortOrder
    notes?: SortOrder
    cookedDate?: SortOrder
    isFavorite?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRecipeSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FavoriteRecipeUserIdRecipeIdCompoundUniqueInput = {
    userId: string
    recipeId: string
  }

  export type FavoriteRecipeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteRecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
  }

  export type FavoriteRecipeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recipeId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type UserRecipeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRecipeCreateWithoutUserInput, UserRecipeUncheckedCreateWithoutUserInput> | UserRecipeCreateWithoutUserInput[] | UserRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutUserInput | UserRecipeCreateOrConnectWithoutUserInput[]
    createMany?: UserRecipeCreateManyUserInputEnvelope
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
  }

  export type FavoriteRecipeCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type UserPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type UserRecipeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRecipeCreateWithoutUserInput, UserRecipeUncheckedCreateWithoutUserInput> | UserRecipeCreateWithoutUserInput[] | UserRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutUserInput | UserRecipeCreateOrConnectWithoutUserInput[]
    createMany?: UserRecipeCreateManyUserInputEnvelope
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
  }

  export type FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumSpiceToleranceFieldUpdateOperationsInput = {
    set?: $Enums.SpiceTolerance
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: UserPreferencesWhereInput | boolean
    delete?: UserPreferencesWhereInput | boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<XOR<UserPreferencesUpdateToOneWithWhereWithoutUserInput, UserPreferencesUpdateWithoutUserInput>, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserRecipeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRecipeCreateWithoutUserInput, UserRecipeUncheckedCreateWithoutUserInput> | UserRecipeCreateWithoutUserInput[] | UserRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutUserInput | UserRecipeCreateOrConnectWithoutUserInput[]
    upsert?: UserRecipeUpsertWithWhereUniqueWithoutUserInput | UserRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRecipeCreateManyUserInputEnvelope
    set?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    disconnect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    delete?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    update?: UserRecipeUpdateWithWhereUniqueWithoutUserInput | UserRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRecipeUpdateManyWithWhereWithoutUserInput | UserRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRecipeScalarWhereInput | UserRecipeScalarWhereInput[]
  }

  export type FavoriteRecipeUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput | FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput | FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutUserInput | FavoriteRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type UserPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: UserPreferencesWhereInput | boolean
    delete?: UserPreferencesWhereInput | boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<XOR<UserPreferencesUpdateToOneWithWhereWithoutUserInput, UserPreferencesUpdateWithoutUserInput>, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserRecipeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRecipeCreateWithoutUserInput, UserRecipeUncheckedCreateWithoutUserInput> | UserRecipeCreateWithoutUserInput[] | UserRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutUserInput | UserRecipeCreateOrConnectWithoutUserInput[]
    upsert?: UserRecipeUpsertWithWhereUniqueWithoutUserInput | UserRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRecipeCreateManyUserInputEnvelope
    set?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    disconnect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    delete?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    update?: UserRecipeUpdateWithWhereUniqueWithoutUserInput | UserRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRecipeUpdateManyWithWhereWithoutUserInput | UserRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRecipeScalarWhereInput | UserRecipeScalarWhereInput[]
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput> | FavoriteRecipeCreateWithoutUserInput[] | FavoriteRecipeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutUserInput | FavoriteRecipeCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput | FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteRecipeCreateManyUserInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput | FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutUserInput | FavoriteRecipeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type UserPreferencesCreatedietaryRestrictionsInput = {
    set: string[]
  }

  export type UserPreferencesCreateallergiesInput = {
    set: string[]
  }

  export type UserPreferencesCreatefavoriteIngredientsInput = {
    set: string[]
  }

  export type UserPreferencesCreatedislikedFoodsInput = {
    set: string[]
  }

  export type UserPreferencesCreatefavoriteCuisinesInput = {
    set: string[]
  }

  export type UserPreferencesCreatefavoriteDishesInput = {
    set: string[]
  }

  export type UserPreferencesCreatefavoriteChefsInput = {
    set: string[]
  }

  export type UserPreferencesCreatefavoriteRestaurantsInput = {
    set: string[]
  }

  export type UserPreferencesCreatenutritionalGoalsInput = {
    set: $Enums.NutritionalGoal[]
  }

  export type UserPreferencesCreatepreferredMealTypesInput = {
    set: $Enums.MealType[]
  }

  export type UserPreferencesCreateavailableEquipmentInput = {
    set: $Enums.CookingEquipment[]
  }

  export type UserCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserPreferencesUpdatedietaryRestrictionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdateallergiesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdatefavoriteIngredientsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdatedislikedFoodsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdatefavoriteCuisinesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdatefavoriteDishesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdatefavoriteChefsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserPreferencesUpdatefavoriteRestaurantsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumSkillLevelFieldUpdateOperationsInput = {
    set?: $Enums.SkillLevel
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserPreferencesUpdatenutritionalGoalsInput = {
    set?: $Enums.NutritionalGoal[]
    push?: $Enums.NutritionalGoal | $Enums.NutritionalGoal[]
  }

  export type EnumBudgetPreferenceFieldUpdateOperationsInput = {
    set?: $Enums.BudgetPreference
  }

  export type UserPreferencesUpdatepreferredMealTypesInput = {
    set?: $Enums.MealType[]
    push?: $Enums.MealType | $Enums.MealType[]
  }

  export type UserPreferencesUpdateavailableEquipmentInput = {
    set?: $Enums.CookingEquipment[]
    push?: $Enums.CookingEquipment | $Enums.CookingEquipment[]
  }

  export type EnumMealComplexityFieldUpdateOperationsInput = {
    set?: $Enums.MealComplexity
  }

  export type UserUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutPreferencesInput
    upsert?: UserUpsertWithoutPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPreferencesInput, UserUpdateWithoutPreferencesInput>, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type RecipeCreateinstructionsInput = {
    set: string[]
  }

  export type RecipeCreatetagsInput = {
    set: string[]
  }

  export type UserRecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<UserRecipeCreateWithoutRecipeInput, UserRecipeUncheckedCreateWithoutRecipeInput> | UserRecipeCreateWithoutRecipeInput[] | UserRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutRecipeInput | UserRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: UserRecipeCreateManyRecipeInputEnvelope
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
  }

  export type FavoriteRecipeCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type UserRecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<UserRecipeCreateWithoutRecipeInput, UserRecipeUncheckedCreateWithoutRecipeInput> | UserRecipeCreateWithoutRecipeInput[] | UserRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutRecipeInput | UserRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: UserRecipeCreateManyRecipeInputEnvelope
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
  }

  export type FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
  }

  export type RecipeUpdateinstructionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty
  }

  export type RecipeUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserRecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<UserRecipeCreateWithoutRecipeInput, UserRecipeUncheckedCreateWithoutRecipeInput> | UserRecipeCreateWithoutRecipeInput[] | UserRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutRecipeInput | UserRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: UserRecipeUpsertWithWhereUniqueWithoutRecipeInput | UserRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: UserRecipeCreateManyRecipeInputEnvelope
    set?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    disconnect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    delete?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    update?: UserRecipeUpdateWithWhereUniqueWithoutRecipeInput | UserRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: UserRecipeUpdateManyWithWhereWithoutRecipeInput | UserRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: UserRecipeScalarWhereInput | UserRecipeScalarWhereInput[]
  }

  export type FavoriteRecipeUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput | FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type UserRecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<UserRecipeCreateWithoutRecipeInput, UserRecipeUncheckedCreateWithoutRecipeInput> | UserRecipeCreateWithoutRecipeInput[] | UserRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: UserRecipeCreateOrConnectWithoutRecipeInput | UserRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: UserRecipeUpsertWithWhereUniqueWithoutRecipeInput | UserRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: UserRecipeCreateManyRecipeInputEnvelope
    set?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    disconnect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    delete?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    connect?: UserRecipeWhereUniqueInput | UserRecipeWhereUniqueInput[]
    update?: UserRecipeUpdateWithWhereUniqueWithoutRecipeInput | UserRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: UserRecipeUpdateManyWithWhereWithoutRecipeInput | UserRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: UserRecipeScalarWhereInput | UserRecipeScalarWhereInput[]
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput> | FavoriteRecipeCreateWithoutRecipeInput[] | FavoriteRecipeUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: FavoriteRecipeCreateOrConnectWithoutRecipeInput | FavoriteRecipeCreateOrConnectWithoutRecipeInput[]
    upsert?: FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: FavoriteRecipeCreateManyRecipeInputEnvelope
    set?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    disconnect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    delete?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    connect?: FavoriteRecipeWhereUniqueInput | FavoriteRecipeWhereUniqueInput[]
    update?: FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput | FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput | FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserRecipesInput = {
    create?: XOR<UserCreateWithoutUserRecipesInput, UserUncheckedCreateWithoutUserRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeCreateNestedOneWithoutUserRecipesInput = {
    create?: XOR<RecipeCreateWithoutUserRecipesInput, RecipeUncheckedCreateWithoutUserRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutUserRecipesInput
    connect?: RecipeWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutUserRecipesNestedInput = {
    create?: XOR<UserCreateWithoutUserRecipesInput, UserUncheckedCreateWithoutUserRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRecipesInput
    upsert?: UserUpsertWithoutUserRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRecipesInput, UserUpdateWithoutUserRecipesInput>, UserUncheckedUpdateWithoutUserRecipesInput>
  }

  export type RecipeUpdateOneRequiredWithoutUserRecipesNestedInput = {
    create?: XOR<RecipeCreateWithoutUserRecipesInput, RecipeUncheckedCreateWithoutUserRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutUserRecipesInput
    upsert?: RecipeUpsertWithoutUserRecipesInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutUserRecipesInput, RecipeUpdateWithoutUserRecipesInput>, RecipeUncheckedUpdateWithoutUserRecipesInput>
  }

  export type UserCreateNestedOneWithoutFavoriteRecipesInput = {
    create?: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeCreateNestedOneWithoutFavoriteRecipesInput = {
    create?: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFavoriteRecipesInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteRecipesInput
    upsert?: UserUpsertWithoutFavoriteRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteRecipesInput, UserUpdateWithoutFavoriteRecipesInput>, UserUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type RecipeUpdateOneRequiredWithoutFavoriteRecipesNestedInput = {
    create?: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutFavoriteRecipesInput
    upsert?: RecipeUpsertWithoutFavoriteRecipesInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutFavoriteRecipesInput, RecipeUpdateWithoutFavoriteRecipesInput>, RecipeUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumSpiceToleranceFilter<$PrismaModel = never> = {
    equals?: $Enums.SpiceTolerance | EnumSpiceToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSpiceToleranceFilter<$PrismaModel> | $Enums.SpiceTolerance
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumSpiceToleranceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SpiceTolerance | EnumSpiceToleranceFieldRefInput<$PrismaModel>
    in?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    notIn?: $Enums.SpiceTolerance[] | ListEnumSpiceToleranceFieldRefInput<$PrismaModel>
    not?: NestedEnumSpiceToleranceWithAggregatesFilter<$PrismaModel> | $Enums.SpiceTolerance
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSpiceToleranceFilter<$PrismaModel>
    _max?: NestedEnumSpiceToleranceFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSkillLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillLevel | EnumSkillLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillLevelFilter<$PrismaModel> | $Enums.SkillLevel
  }

  export type NestedEnumBudgetPreferenceFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetPreference | EnumBudgetPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetPreferenceFilter<$PrismaModel> | $Enums.BudgetPreference
  }

  export type NestedEnumMealComplexityFilter<$PrismaModel = never> = {
    equals?: $Enums.MealComplexity | EnumMealComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumMealComplexityFilter<$PrismaModel> | $Enums.MealComplexity
  }

  export type NestedEnumSkillLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SkillLevel | EnumSkillLevelFieldRefInput<$PrismaModel>
    in?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.SkillLevel[] | ListEnumSkillLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumSkillLevelWithAggregatesFilter<$PrismaModel> | $Enums.SkillLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSkillLevelFilter<$PrismaModel>
    _max?: NestedEnumSkillLevelFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumBudgetPreferenceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BudgetPreference | EnumBudgetPreferenceFieldRefInput<$PrismaModel>
    in?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    notIn?: $Enums.BudgetPreference[] | ListEnumBudgetPreferenceFieldRefInput<$PrismaModel>
    not?: NestedEnumBudgetPreferenceWithAggregatesFilter<$PrismaModel> | $Enums.BudgetPreference
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBudgetPreferenceFilter<$PrismaModel>
    _max?: NestedEnumBudgetPreferenceFilter<$PrismaModel>
  }

  export type NestedEnumMealComplexityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealComplexity | EnumMealComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealComplexity[] | ListEnumMealComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumMealComplexityWithAggregatesFilter<$PrismaModel> | $Enums.MealComplexity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealComplexityFilter<$PrismaModel>
    _max?: NestedEnumMealComplexityFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyFilter<$PrismaModel> | $Enums.Difficulty
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumDifficultyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel>
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel>
    not?: NestedEnumDifficultyWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDifficultyFilter<$PrismaModel>
    _max?: NestedEnumDifficultyFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserPreferencesCreateWithoutUserInput = {
    id?: string
    dietaryRestrictions?: UserPreferencesCreatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesCreateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesCreatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesCreatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesCreatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesCreatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesCreatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesCreatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: $Enums.SkillLevel
    preferredCookingTime?: number | null
    servingSize?: number | null
    nutritionalGoals?: UserPreferencesCreatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesCreatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesCreateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: $Enums.MealComplexity
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesUncheckedCreateWithoutUserInput = {
    id?: string
    dietaryRestrictions?: UserPreferencesCreatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesCreateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesCreatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesCreatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesCreatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesCreatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesCreatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesCreatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: $Enums.SkillLevel
    preferredCookingTime?: number | null
    servingSize?: number | null
    nutritionalGoals?: UserPreferencesCreatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesCreatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesCreateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: $Enums.MealComplexity
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPreferencesCreateOrConnectWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type UserRecipeCreateWithoutUserInput = {
    id?: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutUserRecipesInput
  }

  export type UserRecipeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecipeCreateOrConnectWithoutUserInput = {
    where: UserRecipeWhereUniqueInput
    create: XOR<UserRecipeCreateWithoutUserInput, UserRecipeUncheckedCreateWithoutUserInput>
  }

  export type UserRecipeCreateManyUserInputEnvelope = {
    data: UserRecipeCreateManyUserInput | UserRecipeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteRecipeCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    recipe: RecipeCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateWithoutUserInput = {
    id?: string
    recipeId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeCreateOrConnectWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    create: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput>
  }

  export type FavoriteRecipeCreateManyUserInputEnvelope = {
    data: FavoriteRecipeCreateManyUserInput | FavoriteRecipeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferencesUpsertWithoutUserInput = {
    update: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    where?: UserPreferencesWhereInput
  }

  export type UserPreferencesUpdateToOneWithWhereWithoutUserInput = {
    where?: UserPreferencesWhereInput
    data: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferencesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictions?: UserPreferencesUpdatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesUpdateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesUpdatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesUpdatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesUpdatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesUpdatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesUpdatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesUpdatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
    preferredCookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servingSize?: NullableIntFieldUpdateOperationsInput | number | null
    nutritionalGoals?: UserPreferencesUpdatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: EnumBudgetPreferenceFieldUpdateOperationsInput | $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesUpdatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesUpdateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: EnumMealComplexityFieldUpdateOperationsInput | $Enums.MealComplexity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    dietaryRestrictions?: UserPreferencesUpdatedietaryRestrictionsInput | string[]
    allergies?: UserPreferencesUpdateallergiesInput | string[]
    favoriteIngredients?: UserPreferencesUpdatefavoriteIngredientsInput | string[]
    dislikedFoods?: UserPreferencesUpdatedislikedFoodsInput | string[]
    favoriteCuisines?: UserPreferencesUpdatefavoriteCuisinesInput | string[]
    favoriteDishes?: UserPreferencesUpdatefavoriteDishesInput | string[]
    favoriteChefs?: UserPreferencesUpdatefavoriteChefsInput | string[]
    favoriteRestaurants?: UserPreferencesUpdatefavoriteRestaurantsInput | string[]
    cookingSkillLevel?: EnumSkillLevelFieldUpdateOperationsInput | $Enums.SkillLevel
    preferredCookingTime?: NullableIntFieldUpdateOperationsInput | number | null
    servingSize?: NullableIntFieldUpdateOperationsInput | number | null
    nutritionalGoals?: UserPreferencesUpdatenutritionalGoalsInput | $Enums.NutritionalGoal[]
    budgetPreference?: EnumBudgetPreferenceFieldUpdateOperationsInput | $Enums.BudgetPreference
    preferredMealTypes?: UserPreferencesUpdatepreferredMealTypesInput | $Enums.MealType[]
    availableEquipment?: UserPreferencesUpdateavailableEquipmentInput | $Enums.CookingEquipment[]
    mealComplexity?: EnumMealComplexityFieldUpdateOperationsInput | $Enums.MealComplexity
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRecipeWhereUniqueInput
    update: XOR<UserRecipeUpdateWithoutUserInput, UserRecipeUncheckedUpdateWithoutUserInput>
    create: XOR<UserRecipeCreateWithoutUserInput, UserRecipeUncheckedCreateWithoutUserInput>
  }

  export type UserRecipeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRecipeWhereUniqueInput
    data: XOR<UserRecipeUpdateWithoutUserInput, UserRecipeUncheckedUpdateWithoutUserInput>
  }

  export type UserRecipeUpdateManyWithWhereWithoutUserInput = {
    where: UserRecipeScalarWhereInput
    data: XOR<UserRecipeUpdateManyMutationInput, UserRecipeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRecipeScalarWhereInput = {
    AND?: UserRecipeScalarWhereInput | UserRecipeScalarWhereInput[]
    OR?: UserRecipeScalarWhereInput[]
    NOT?: UserRecipeScalarWhereInput | UserRecipeScalarWhereInput[]
    id?: StringFilter<"UserRecipe"> | string
    userId?: StringFilter<"UserRecipe"> | string
    recipeId?: StringFilter<"UserRecipe"> | string
    rating?: IntNullableFilter<"UserRecipe"> | number | null
    notes?: StringNullableFilter<"UserRecipe"> | string | null
    cookedDate?: DateTimeNullableFilter<"UserRecipe"> | Date | string | null
    isFavorite?: BoolFilter<"UserRecipe"> | boolean
    createdAt?: DateTimeFilter<"UserRecipe"> | Date | string
    updatedAt?: DateTimeFilter<"UserRecipe"> | Date | string
  }

  export type FavoriteRecipeUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    update: XOR<FavoriteRecipeUpdateWithoutUserInput, FavoriteRecipeUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteRecipeCreateWithoutUserInput, FavoriteRecipeUncheckedCreateWithoutUserInput>
  }

  export type FavoriteRecipeUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteRecipeWhereUniqueInput
    data: XOR<FavoriteRecipeUpdateWithoutUserInput, FavoriteRecipeUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteRecipeUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteRecipeScalarWhereInput
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteRecipeScalarWhereInput = {
    AND?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
    OR?: FavoriteRecipeScalarWhereInput[]
    NOT?: FavoriteRecipeScalarWhereInput | FavoriteRecipeScalarWhereInput[]
    id?: StringFilter<"FavoriteRecipe"> | string
    userId?: StringFilter<"FavoriteRecipe"> | string
    recipeId?: StringFilter<"FavoriteRecipe"> | string
    createdAt?: DateTimeFilter<"FavoriteRecipe"> | Date | string
  }

  export type UserCreateWithoutPreferencesInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecipes?: UserRecipeCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPreferencesInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecipes?: UserRecipeUncheckedCreateNestedManyWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
  }

  export type UserUpsertWithoutPreferencesInput = {
    update: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
    create: XOR<UserCreateWithoutPreferencesInput, UserUncheckedCreateWithoutPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPreferencesInput, UserUncheckedUpdateWithoutPreferencesInput>
  }

  export type UserUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecipes?: UserRecipeUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecipes?: UserRecipeUncheckedUpdateManyWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRecipeCreateWithoutRecipeInput = {
    id?: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRecipesInput
  }

  export type UserRecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRecipeCreateOrConnectWithoutRecipeInput = {
    where: UserRecipeWhereUniqueInput
    create: XOR<UserRecipeCreateWithoutRecipeInput, UserRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type UserRecipeCreateManyRecipeInputEnvelope = {
    data: UserRecipeCreateManyRecipeInput | UserRecipeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteRecipeCreateWithoutRecipeInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteRecipesInput
  }

  export type FavoriteRecipeUncheckedCreateWithoutRecipeInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type FavoriteRecipeCreateOrConnectWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    create: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type FavoriteRecipeCreateManyRecipeInputEnvelope = {
    data: FavoriteRecipeCreateManyRecipeInput | FavoriteRecipeCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type UserRecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: UserRecipeWhereUniqueInput
    update: XOR<UserRecipeUpdateWithoutRecipeInput, UserRecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<UserRecipeCreateWithoutRecipeInput, UserRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type UserRecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: UserRecipeWhereUniqueInput
    data: XOR<UserRecipeUpdateWithoutRecipeInput, UserRecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type UserRecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: UserRecipeScalarWhereInput
    data: XOR<UserRecipeUpdateManyMutationInput, UserRecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type FavoriteRecipeUpsertWithWhereUniqueWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    update: XOR<FavoriteRecipeUpdateWithoutRecipeInput, FavoriteRecipeUncheckedUpdateWithoutRecipeInput>
    create: XOR<FavoriteRecipeCreateWithoutRecipeInput, FavoriteRecipeUncheckedCreateWithoutRecipeInput>
  }

  export type FavoriteRecipeUpdateWithWhereUniqueWithoutRecipeInput = {
    where: FavoriteRecipeWhereUniqueInput
    data: XOR<FavoriteRecipeUpdateWithoutRecipeInput, FavoriteRecipeUncheckedUpdateWithoutRecipeInput>
  }

  export type FavoriteRecipeUpdateManyWithWhereWithoutRecipeInput = {
    where: FavoriteRecipeScalarWhereInput
    data: XOR<FavoriteRecipeUpdateManyMutationInput, FavoriteRecipeUncheckedUpdateManyWithoutRecipeInput>
  }

  export type UserCreateWithoutUserRecipesInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRecipesInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRecipesInput, UserUncheckedCreateWithoutUserRecipesInput>
  }

  export type RecipeCreateWithoutUserRecipesInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteRecipes?: FavoriteRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutUserRecipesInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteRecipes?: FavoriteRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutUserRecipesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutUserRecipesInput, RecipeUncheckedCreateWithoutUserRecipesInput>
  }

  export type UserUpsertWithoutUserRecipesInput = {
    update: XOR<UserUpdateWithoutUserRecipesInput, UserUncheckedUpdateWithoutUserRecipesInput>
    create: XOR<UserCreateWithoutUserRecipesInput, UserUncheckedCreateWithoutUserRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRecipesInput, UserUncheckedUpdateWithoutUserRecipesInput>
  }

  export type UserUpdateWithoutUserRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeUpsertWithoutUserRecipesInput = {
    update: XOR<RecipeUpdateWithoutUserRecipesInput, RecipeUncheckedUpdateWithoutUserRecipesInput>
    create: XOR<RecipeCreateWithoutUserRecipesInput, RecipeUncheckedCreateWithoutUserRecipesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutUserRecipesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutUserRecipesInput, RecipeUncheckedUpdateWithoutUserRecipesInput>
  }

  export type RecipeUpdateWithoutUserRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteRecipes?: FavoriteRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutUserRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteRecipes?: FavoriteRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserCreateWithoutFavoriteRecipesInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    preferences?: UserPreferencesCreateNestedOneWithoutUserInput
    userRecipes?: UserRecipeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteRecipesInput = {
    id?: string
    email: string
    passwordHash: string
    name: string
    location?: string | null
    timezone?: string | null
    dinnerTimePreference?: string | null
    spiceTolerance?: $Enums.SpiceTolerance
    createdAt?: Date | string
    updatedAt?: Date | string
    preferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
    userRecipes?: UserRecipeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
  }

  export type RecipeCreateWithoutFavoriteRecipesInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecipes?: UserRecipeCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutFavoriteRecipesInput = {
    id?: string
    title: string
    description?: string | null
    ingredients: JsonNullValueInput | InputJsonValue
    instructions?: RecipeCreateinstructionsInput | string[]
    cookingTime: number
    difficulty?: $Enums.Difficulty
    cuisineType?: string | null
    inspirationSource?: string | null
    servings?: number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeCreatetagsInput | string[]
    isPublic?: boolean
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRecipes?: UserRecipeUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutFavoriteRecipesInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
  }

  export type UserUpsertWithoutFavoriteRecipesInput = {
    update: XOR<UserUpdateWithoutFavoriteRecipesInput, UserUncheckedUpdateWithoutFavoriteRecipesInput>
    create: XOR<UserCreateWithoutFavoriteRecipesInput, UserUncheckedCreateWithoutFavoriteRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteRecipesInput, UserUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type UserUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferences?: UserPreferencesUpdateOneWithoutUserNestedInput
    userRecipes?: UserRecipeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    dinnerTimePreference?: NullableStringFieldUpdateOperationsInput | string | null
    spiceTolerance?: EnumSpiceToleranceFieldUpdateOperationsInput | $Enums.SpiceTolerance
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    preferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
    userRecipes?: UserRecipeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeUpsertWithoutFavoriteRecipesInput = {
    update: XOR<RecipeUpdateWithoutFavoriteRecipesInput, RecipeUncheckedUpdateWithoutFavoriteRecipesInput>
    create: XOR<RecipeCreateWithoutFavoriteRecipesInput, RecipeUncheckedCreateWithoutFavoriteRecipesInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutFavoriteRecipesInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutFavoriteRecipesInput, RecipeUncheckedUpdateWithoutFavoriteRecipesInput>
  }

  export type RecipeUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecipes?: UserRecipeUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutFavoriteRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: JsonNullValueInput | InputJsonValue
    instructions?: RecipeUpdateinstructionsInput | string[]
    cookingTime?: IntFieldUpdateOperationsInput | number
    difficulty?: EnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty
    cuisineType?: NullableStringFieldUpdateOperationsInput | string | null
    inspirationSource?: NullableStringFieldUpdateOperationsInput | string | null
    servings?: IntFieldUpdateOperationsInput | number
    nutritionInfo?: NullableJsonNullValueInput | InputJsonValue
    tags?: RecipeUpdatetagsInput | string[]
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRecipes?: UserRecipeUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserRecipeCreateManyUserInput = {
    id?: string
    recipeId: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteRecipeCreateManyUserInput = {
    id?: string
    recipeId: string
    createdAt?: Date | string
  }

  export type UserRecipeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutUserRecipesNestedInput
  }

  export type UserRecipeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipe?: RecipeUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeCreateManyRecipeInput = {
    id?: string
    userId: string
    rating?: number | null
    notes?: string | null
    cookedDate?: Date | string | null
    isFavorite?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FavoriteRecipeCreateManyRecipeInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type UserRecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRecipesNestedInput
  }

  export type UserRecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cookedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isFavorite?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteRecipesNestedInput
  }

  export type FavoriteRecipeUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteRecipeUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeCountOutputTypeDefaultArgs instead
     */
    export type RecipeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPreferencesDefaultArgs instead
     */
    export type UserPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPreferencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeDefaultArgs instead
     */
    export type RecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRecipeDefaultArgs instead
     */
    export type UserRecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoriteRecipeDefaultArgs instead
     */
    export type FavoriteRecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavoriteRecipeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}